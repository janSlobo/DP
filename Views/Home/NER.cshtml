
@{
    ViewData["Title"] = "NER";
    var alltypes = ViewBag.Alltypes as Dictionary<string,List<string>>;
    var groupedEntities = ViewBag.nercounts_types as Dictionary<string, Dictionary<string, List<KeyValuePair<string, int>>>>;
    var entitySentimentsTable = ViewBag.EntitySentiments as Dictionary<string,List<EntitySentimentData>>;
   
}
<script>
    var heightValue = 420;
    var widthValue = 450;

    var biggerWidth = 750;
    var data_er = @Html.Raw(Json.Serialize(ViewBag.PoliticianRatios));
    var entityTypes = @Html.Raw(Json.Serialize(ViewBag.entityTypes));
    var typeCounts = @Html.Raw(Json.Serialize(ViewBag.typeCounts));
    var entitySentiments = @Html.Raw(Json.Serialize(ViewBag.EntitySentiments));
    var nerCounts = @Html.Raw(Json.Serialize(ViewBag.nercounts_types));
    var groupedEntities = @Html.Raw(Json.Serialize(groupedEntities));
    var allTypes = @Html.Raw(Json.Serialize(alltypes));
    var yearS;
    function updateStatistics(selectedYear){
        yearS = selectedYear.toString();
        populateCategoryFilter();
        createCheckbox();
        updateChartER();
        showEntTypeBar();
        populateSelect();
        updateChart();
        createSelect();
        updateTable();
        updateChartCounts();
    }
    function populateCategoryFilter() {
        var groupedEntitiesY = groupedEntities[yearS] || groupedEntities["all"]
        var select = document.getElementById("categoryFilter");

        var categories = Object.keys(groupedEntitiesY);

        // Přidání jednotlivých kategorií do <select>
        categories.forEach(category => {
            var option = document.createElement("option");
            option.value = category;
            option.textContent = category;
            select.appendChild(option);
        });
    }
    function createCheckbox() {
        var data_ery=data_er[yearS] || data_er["all"]
        var politicians = Object.keys(data_ery);
        var ratios = Object.values(data_ery);
        var listForm = document.getElementById('politician-list-er');
        politicians.forEach((politician, index) => {
            var div = document.createElement('div');
            div.className = 'form-check';
            var checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.value = politician;
            checkbox.checked = false;
            checkbox.id = 'cb_' + index;
            checkbox.addEventListener('change', updateChartER);

            var label = document.createElement('label');
            label.htmlFor = 'cb_' + index;
            label.textContent = politician;

            div.appendChild(checkbox);
            div.appendChild(label);
            listForm.appendChild(div); // Přidáno do formuláře místo divu
        });
    }
    function updateChartER() {
        var selectedPoliticians = [];
        var selectedRatios = [];
        var data_ery = data_er[yearS] || data_er["all"]
        var politicians = Object.keys(data_ery);
        var ratios = Object.values(data_ery);

        politicians.forEach((politician, index) => {
            var checkbox = document.getElementById('cb_' + index);
            if (checkbox.checked) {
                console.log(politician);
                console.log(data_ery[politician]);
                selectedPoliticians.push(politician);
                selectedRatios.push(data_ery[politician]);
            }
        });

        Plotly.newPlot('entity_ratio', [{
            x: selectedPoliticians,
            y: selectedRatios,
            type: 'bar'
        }], {
            title: 'Míra výskytu entit ve vyjádřeních',
            xaxis: { title: '' },
            yaxis: { title: 'Poměr entit k počtu slov' },
            width: biggerWidth,
            height: heightValue,
            margin: {
                b: 70,
                l: 40,
                t: 50
            }
        });
    }
    function showEntTypeBar() {
        var entityTypesY = entityTypes[yearS] || entityTypes["all"]
        var typeCountsY = typeCounts[yearS] || typeCounts["all"]
        var data = [{
            x: entityTypesY,
            y: typeCountsY,
            type: 'bar'
        }];

        var layout = {
            title: 'Nejčastější typy entit',
            xaxis: { title: 'Typ' },
            yaxis: { title: 'Počet výskytů' },
            width: biggerWidth,
            height: heightValue,
            margin: {
                b: 70,
                l: 30,
                t: 50
            }
        };

        Plotly.newPlot('entitytype_bar', data, layout);
    }
    function populateSelect() {
        var alltypesy=allTypes[yearS] || allTypes["all"]
        var select = document.getElementById("entityTypeSelect");

        // Vymazání existujících možností (pokud by bylo nutné)
        select.innerHTML = '';

        // Naplnění možností
        alltypesy.forEach(type => {
            var option = document.createElement("option");
            option.value = type;
            option.textContent = type;
            select.appendChild(option);
        });
    }
    function updateChart() {
        var selectedEntityType = document.getElementById('entityTypeSelect').value;
        var entitySentimentsY = entitySentiments[yearS] || entitySentiments["all"]

        var filteredData = entitySentimentsY.filter(function (item) {
            return item.entityType === selectedEntityType;
        });

        filteredData.sort(function (a, b) {
            return a.averageSentiment - b.averageSentiment;
        });

        var entityNames = filteredData.map(function (item) { return item.entityName; });
        var averageSentiments = filteredData.map(function (item) { return item.averageSentiment; });


        var trace = {
            x: entityNames,
            y: averageSentiments,
            type: 'bar'
        };

        var layout = {
            title: 'Průměrný sentiment nejzmiňovanějších entit',
            xaxis: { title: '', tickangle: -45 },
            yaxis: { title: '' },
            width: biggerWidth,
            height: heightValue,
            margin: {
                b: 70,
                l: 30,
                t: 50
            },
        };

        Plotly.newPlot('sentimentBarplot', [trace], layout);

        //boxplot


        var boxTraces = filteredData.map(function (item) {
            return {
                y: item.sentiments,
                type: 'box',
                name: item.entityName
            };
        });

        var boxLayout = {
            title: 'Rozsah sentimentu příspěvků s entitami',
            xaxis: { title: '', tickangle: -45 },
            yaxis: { title: '' },
            width: biggerWidth,
            height: heightValue,
            margin: {
                b: 70,
                l: 30,
                t: 50
            }
        };

        Plotly.newPlot('sentimentboxEntity', boxTraces, boxLayout);

    }
    function createSelect() {
        var nercountsy = nerCounts[yearS] || nerCounts["all"];
        var typeSelect = document.getElementById('typeSelect');
        Object.keys(nercountsy).forEach(function (type) {
            var option = document.createElement('option');
            option.value = type;
            option.textContent = type;
            typeSelect.appendChild(option);
        });
    }
    function updateTable() {
        var entitySentimentsY = entitySentiments[yearS] || entitySentiments["all"]
        var groupedEntitiesY = groupedEntities[yearS] || groupedEntities["all"]
        const categoryFilter = document.getElementById('categoryFilter');
        const sortBy = document.getElementById('sortBy');
        const sortOrder = document.getElementById('sortOrder');
        const tableBody = document.getElementById('entityTableBody');




        let filteredEntities = groupedEntitiesY;

        // Filtrace podle kategorie
        const selectedCategory = categoryFilter.value;


        const headerCell = document.getElementById('entityTableHead'); // Nahraď 'yourThId' skutečným id
        if (headerCell) {
            headerCell.textContent = selectedCategory;
        }
        if (selectedCategory) {
            filteredEntities = Object.fromEntries(
                Object.entries(groupedEntitiesY).filter(([key]) => key === selectedCategory)
            );
        }

        // Třídění
        const sortByValue = sortBy.value;
        const sortOrderValue = sortOrder.value === 'asc' ? 1 : -1;

        let sortedEntities = Object.entries(filteredEntities).map(([entityType, entities]) => {
            return {
                entityType: entityType,
                entities: entities.sort((a, b) => {
                    let aValue = 0;
                    let bValue = 0;

                    if (sortByValue === 'alphabetical') {
                        aValue = a.key;
                        bValue = b.key;
                    } else if (sortByValue === 'sentiment') {
                        aValue = entitySentimentsY.find(x => x.entityName === a.key && x.entityType === entityType)?.averageSentiment || 0;
                        bValue = entitySentimentsY.find(x => x.entityName === b.key && x.entityType === entityType)?.averageSentiment || 0;
                    } else if (sortByValue === 'count') {
                        aValue = a.value;
                        bValue = b.value;
                    }

                    return (aValue > bValue ? 1 : -1) * sortOrderValue;
                })
            };
        });



        tableBody.innerHTML = '';

        const maxEntitiesCount = Math.max(...sortedEntities.map(item => item.entities.length));

        for (let i = 0; i < maxEntitiesCount; i++) {
            let row = document.createElement('tr');

            sortedEntities.forEach(({ entityType, entities }) => {
                let cell = document.createElement('td');

                const entity = entities[i] || {};
                const sentiment = entitySentimentsY.find(x => x.entityName === entity.key && x.entityType === entityType)?.averageSentiment || '-';
                console.log(sentiment)

                if (entity.key) {
                    cell.innerHTML = `<strong>${entity.key}</strong>:<p>Počet výskytů: ${entity.value}</p><p>Prům. sentiment: ${sentiment}</p>`;

                } else {
                    cell.textContent = '-';
                }
                row.appendChild(cell);
            });

            tableBody.appendChild(row);
        }
    }
    function updateChartCounts() {
        var nercountsy = nerCounts[yearS] || nerCounts["all"];
        var selectedType = document.getElementById('typeSelect').value;

        console.log(selectedType)
        if (selectedType && nercountsy[selectedType]) {

            var entities = nercountsy[selectedType];
            var entityNames = entities.map(function (e) { return e.key; });
            var entityCounts = entities.map(function (e) { return e.value; });


            var trace = {
                x: entityNames,
                y: entityCounts,
                type: 'bar'
            };

            var layout = {
                title: 'Frekvence entit typu ' + selectedType,
                xaxis: {
                    title: ''
                },
                yaxis: {
                    title: ''
                },
                width: biggerWidth,
                height: heightValue
            };


            Plotly.newPlot('barplotCounts', [trace], layout);
        }
    }
    function showNerGraphs() {



        populateCategoryFilter();
        createCheckbox();
        updateChartER();

        showEntTypeBar()

       
       
       

       
        populateSelect();


        document.getElementById('entityTypeSelect').value = document.getElementById('entityTypeSelect').options[0].value;
        updateChart();


        document.getElementById('entityTypeSelect').addEventListener('change', function () {
            updateChart();
        });

        

        createSelect();
        
        document.getElementById('typeSelect').addEventListener('change', function () {
            updateChartCounts();
        });
        document.getElementById('typeSelect').value = document.getElementById('typeSelect').options[1].value;
        updateChartCounts();


      

        updateTable();
        categoryFilter.addEventListener('change', updateTable);
        sortBy.addEventListener('change', updateTable);
        sortOrder.addEventListener('change', updateTable);

        
        
    }

    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById("yearFilter").addEventListener("change", function () {
            const selectedYear = this.value;
            updateStatistics(selectedYear);
        });
        showNerGraphs()


    });


      
</script>
<h1>Analýza výskytu entit ve vyjádřeních</h1>
<div class="row justify-content-start mb-3">
    <div class="col-md-4">
        <select id="yearFilter" class="form-select">
            <option value="">Všechna vyjádření</option>
            @for (int year = 2016; year <= 2023; year++)
            {
                <option value="@year.ToString()">@year</option>
            }
        </select>
    </div>
</div>
<div id="ner" class="sentiment_page">

    <div class="left-panel-ner">
        <div class="card">
            <div class="card-header">
                <h3>Nejzmiňovanější entity</h3>
            </div>
            <div class="card-body">

                <div class="block">

                    <div id="entitytype_bar" class="chart-container"></div>
                </div>

                <div class="block">
                    <div class="dropdown-time">
                        <label for="typeSelect">Vyberte typ:</label>
                        <select id="typeSelect" class="form-select">
                            <option value="">--Vyberte typ--</option>
                        
                        </select>
                    </div>
                    
                    <div id="barplotCounts"></div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h3>Sentiment ve zmínkách</h3>
            </div>
            <div class="card-body">
                <div class="dropdown-time">
                    <label for="entityTypeSelect">Vyberte typ:</label>
                    <select id="entityTypeSelect" onchange="updateChart()" class="form-select">

                       
                    </select>
                </div>
                <div class="block">

                    <div id="sentimentBarplot" class="chart-container"></div>
                    
                </div>
                <div class="block">
                    <div id="sentimentboxEntity" class="chart-container"></div>
                </div>
            </div>

        </div>


        <div class="card">
            <div class="card-header">
                <h3>Politici a entity</h3>
            </div>
            <div class="card-body">

                <div class="block">
                   
                    <div class="row">
                        <div class="col-md-auto">

                            <form id="politician-list-er" class="form-group custom-form" style="max-height: 400px; overflow-y: auto;">
                            </form>

                        </div>

                        <div class="col-md-8 ">
                            <div id="entity_ratio" class="chart-container"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

   
 

        
  

    
  



  
    
   
    
    <div class="right-panel-ner">
        <div id="filter-panel" class="d-flex gap-2 align-items-center p-3 border rounded bg-light filter-panel">
            <!-- Filtry -->
            <select id="categoryFilter" class="form-select">
                <option value="">Vyber kategorii</option>
              
            </select>

            <select id="sortBy" class="form-select">
                <option value="alphabetical">Abecedně</option>
                <option value="sentiment">Sentiment</option>
                <option value="count">Počet výskytů</option>
            </select>

            <select id="sortOrder" class="form-select">
                <option value="asc">Vzestupně</option>
                <option value="desc">Sestupně</option>
            </select>
        </div>

        <table id="entityTable" class="table styled-table">
            <thead>
                <tr id="entityTableHeadRow"></tr>
            </thead>
            <tbody id="entityTableBody"></tbody>
        </table>

    </div>

</div>