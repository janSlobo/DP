@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.Rendering
@using PoliticStatements.Models



@{
    ViewData["Title"] = "Statements";
    var entitySentiments = ViewBag.EntitySentiments as List<EntitySentimentData>;
    
    var alltypes = ViewBag.Alltypes as List<string>;

    var topEntities = ViewBag.TopEntities as List<string>;
    var cooccurrenceMatrix = ViewBag.CooccurrenceMatrix as int[,];
    var babis_entity = ViewBag.babis_year_ent as Dictionary<string, Dictionary<string, int>>;
    var sentimentData = ViewBag.time_sentiment as Dictionary<string, Dictionary<string, double>>;
   
    var entityRatios = ViewBag.entity_ratio as Dictionary<string, double>;

    var politicianRatios = ViewBag.PoliticianRatios as Dictionary<string, double>;
    var politicians = politicianRatios.Keys.ToList();
    var ratios = politicianRatios.Values.ToList();

    var sentimentRatios = ViewBag.extreme_s as Dictionary<string, (double PositiveRatio, double NegativeRatio)>;
}

 <nav class="navbar navbar-expand-lg navbar-light bg-light">
       
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <a class="nav-link" href="#" onclick="showHistogramStFrequency()">Statistika počtu příspěvků</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#" onclick="showHistogramMentionsFrequency()">Statistika zmínek politiků</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#" onclick="showWordsFrequency()">Statistika počtu slov</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#" onclick="showStatistics()">Obecné statistiky</a>
                </li>


                <li class="nav-item">
                    <a class="nav-link" href="#" onclick="showSentiment()">Analýza sentimentu</a>
                </li>

            <li class="nav-item">
                <a class="nav-link" href="#" onclick="showNer()">Analýza pojmenovaných entit</a>
            </li>
             <li class="nav-item">
                <a class="nav-link" href="#" onclick="showRhetorics()">Rétorika textů</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#" onclick="showClusters()">Shluky</a>
            </li>
            </ul>
        </div>
    </nav>
 


<div id="wordsStats" style="display: none; justify-content: space-between;">
    
    <div style="width: 50%;float:left">
        <h4>Statistika četnosti slov pro všechny záznamy</h4>
        <div id="wordsS"></div>
        <div id="wordsSF"></div>
        <div id="wordsST"></div>
        <div id="boxwords"></div>
        <div id="boxwordsTF"></div>
    </div>

 
    <div style="width: 50%;float:right">
        <h4>Statistika četnosti slov pro záznamy obsahující zmínky</h4>
        <div id="wordsSM"></div>
        <div id="wordsSFM"></div>
        <div id="wordsSTM"></div>
        <div id="boxwordsM"></div>
        <div id="boxwordsTFM"></div>
    </div>
</div>

<div id="statementsS" style="display: none; justify-content: space-between;">
    
    <div style="width: 50%;float:left">
        <h4>Statistika četnosti vyjádření pro všechny záznamy</h4>
        <div id="histogram"></div>
        <div id="histogram_T"></div>
        <div id="histogram_F"></div>
    </div>

    
    <div style="width: 50%;float:right">
        <h4>Statistika četnosti vyjádření pro záznamy obsahující zmínky</h4>
        <div id="histogramM"></div>
        <div id="histogram_TM"></div>
        <div id="histogram_FM"></div>
    </div>
</div>

<div style="width:55%" id="mentionsHist"></div>
<div style="width:55%" id="mentionsHist1"></div>
<div style="width:55%" id="mentionsHistT"></div>
<div style="width:55%" id="mentionsHistF"></div>
<div style="width:55%" id="box1"></div> 
<div style="width:55%" id="boxT"></div> 


<script>
    function showAllPlots(){
        hideAllPlots();
        showSentimentGraphs();
        showNerGraphs();
        showRhetoricsGraphs();
        showClusterGraphs();
    }
    function showMore(tableId, button) {

        const table = document.getElementById(tableId);
        if (!table) {
            console.error(`Tabulka s ID '${tableId}' nebyla nalezena.`);
            return;
        }

        
        const rows = table.querySelectorAll(".table-row");

        const hiddenRows = Array.from(rows).filter(row => row.style.display === "none");

        if (hiddenRows.length > 0) {
          
            hiddenRows.forEach(row => row.style.display = "table-row");
            button.textContent = "Skrýt";  
        } else {
            
            Array.from(rows).forEach((row, index) => {
                if (index >= 10) {
                    row.style.display = "none";
                }
            });
            button.textContent = "Zobrazit více";  
        }

    }
    function hideAllPlots() {
            document.getElementById('wordsStats').style.display = 'none';
                    
            document.getElementById('statementsS').style.display = 'none';        
            document.getElementById('mentionsHist').style.display = 'none';
        document.getElementById('mentionsHist1').style.display = 'none';
            document.getElementById('mentionsHistT').style.display = 'none';
            document.getElementById('mentionsHistF').style.display = 'none';

            document.getElementById('box1').style.display = 'none';
            document.getElementById('boxT').style.display = 'none';
             document.getElementById('stats').style.display = 'none';
              document.getElementById('sentiment').style.display = 'none';
             /* document.getElementById('sentimentbox').style.display = 'none';
              document.getElementById('polaritybar').style.display = 'none';
              document.getElementById('polaritybarM').style.display = 'none';
            document.getElementById('polaritybar_combined').style.display = 'none';
              document.getElementById('mentionbar').style.display = 'none';
              
        document.getElementById('korelace-sentiment-pocetzminek').style.display = 'none';
        document.getElementById('server-sentiment').style.display = 'none';*/
        document.getElementById('ner').style.display = 'none';
        document.getElementById('rhetorics').style.display = 'none';
        document.getElementById('clusters').style.display = 'none';
    }

    function showHistogramStFrequency() {
            hideAllPlots();

             document.getElementById('statementsS').style.display = 'flex';
           
             
            var histogramData = @Html.Raw(Json.Serialize(ViewBag.histogramData));
  
            var statementCounts = histogramData.map(data => data.statementCount);
            var personCounts = histogramData.map(data => data.personCount);
  
            var data = [{
            x: statementCounts,
                y: personCounts,
                type: 'bar',
                width:0.5
            }];

            var layout = {
                title: 'Histogram četnosti příspěvků na všech sociálních sítí',
            xaxis: { title: 'Počet výroků', type: 'log', tickvals: [1, 10,50, 100,150,200,500,1000] },
                yaxis: { title: 'Počet osob' }
            };

            Plotly.newPlot('histogram', data, layout);


            var histogramData = @Html.Raw(Json.Serialize(ViewBag.histogramData_F));

            var statementCounts = histogramData.map(data => data.statementCount);
            var personCounts = histogramData.map(data => data.personCount);

            var data = [{
                x: statementCounts,
                y: personCounts,
                type: 'bar',
                width: 0.5
            }];

            var layout = {
                title: 'Histogram četnosti příspěvků na Facebooku',
            xaxis: { title: 'Počet výroků', type: 'log', tickvals: [1, 10, 50, 100, 150, 200, 500] },
                yaxis: { title: 'Počet osob' }
            };

            Plotly.newPlot('histogram_F', data, layout);

            var histogramData = @Html.Raw(Json.Serialize(ViewBag.histogramData_T));

            var statementCounts = histogramData.map(data => data.statementCount);
            var personCounts = histogramData.map(data => data.personCount);

            var data = [{
                x: statementCounts,
                y: personCounts,
                type: 'bar',
                width:0.5
            }];

            var layout = {
                title: 'Histogram četnosti příspěvků na Twitteru',
            xaxis: { title: 'Počet výroků', type: 'log', tickvals: [1, 10, 50, 100, 150, 200, 500] },
                yaxis: { title: 'Počet osob' }
            };

            Plotly.newPlot('histogram_T', data, layout);

        //with mentions
        var histogramData = @Html.Raw(Json.Serialize(ViewBag.histogramDataM));

        var statementCounts = histogramData.map(data => data.statementCount);
        var personCounts = histogramData.map(data => data.personCount);

        var data = [{
            x: statementCounts,
            y: personCounts,
            type: 'bar',
            width: 0.5
        }];

        var layout = {
            title: 'Histogram četnosti příspěvků na všech sociálních sítí',
            xaxis: { title: 'Počet výroků', type: 'log', tickvals: [1, 10, 50, 100, 150, 200, 500] },
            yaxis: { title: 'Počet osob' }
        };

        Plotly.newPlot('histogramM', data, layout);


        var histogramData = @Html.Raw(Json.Serialize(ViewBag.histogramData_FM));

        var statementCounts = histogramData.map(data => data.statementCount);
        var personCounts = histogramData.map(data => data.personCount);

        var data = [{
            x: statementCounts,
            y: personCounts,
            type: 'bar',
            width: 0.5
        }];

        var layout = {
            title: 'Histogram četnosti příspěvků na Facebooku',
            xaxis: { title: 'Počet výroků', type: 'log', tickvals: [1, 10, 50, 100, 150, 200, 500] },
            yaxis: { title: 'Počet osob' }
        };

        Plotly.newPlot('histogram_FM', data, layout);

        var histogramData = @Html.Raw(Json.Serialize(ViewBag.histogramData_TM));

        var statementCounts = histogramData.map(data => data.statementCount);
        var personCounts = histogramData.map(data => data.personCount);

        var data = [{
            x: statementCounts,
            y: personCounts,
            type: 'bar',
            width: 0.5
        }];

        var layout = {
            title: 'Histogram četnosti příspěvků na Twitteru',
            xaxis: { title: 'Počet výroků', type: 'log', tickvals: [1, 10, 50, 100, 150, 200, 500] },
            yaxis: { title: 'Počet osob' }
        };

        Plotly.newPlot('histogram_TM', data, layout);
    }
   
    function showHistogramMentionsFrequency(){
        hideAllPlots();
         document.getElementById('mentionsHist').style.display = 'block';
        document.getElementById('mentionsHist1').style.display = 'block';
         document.getElementById('mentionsHistT').style.display = 'block';
         document.getElementById('mentionsHistF').style.display = 'block';
         document.getElementById('box1').style.display = 'block';
         document.getElementById('boxT').style.display = 'block';

        var histogramData = @Html.Raw(Json.Serialize(ViewBag.mentionsByPolitican));
        console.log(histogramData);
        var politicCount = histogramData.map(data => data.countOfPoliticians);
        var mentionsCount = histogramData.map(data => data.countOfMentions);

        var data = [{
            x: mentionsCount,
            y: politicCount,
            type: 'bar',
            width: 0.5
        }];

        var layout = {
            title: 'Histogram četnosti zmínek na všech sociálních sítích',
            xaxis: { title: 'Počet zmínek', type: 'log', tickvals: [1, 10, 50, 100, 200, 500,1000] },
            yaxis: { title: 'Počet politiků' }
        };

        Plotly.newPlot('mentionsHist1', data, layout);

        var histogramData = @Html.Raw(Json.Serialize(ViewBag.mentionsOfPoliticians));
        console.log(histogramData);
        var politicCount = histogramData.map(data => data.countOfPoliticians);
        var mentionsCount = histogramData.map(data => data.countOfMentions);

        var data = [{
            x: mentionsCount,
            y: politicCount,
            type: 'bar',
            width:0.5
        }];

        var layout = {
            title: 'Histogram četnosti zmínek na všech sociálních sítích',
            xaxis: { title: 'Počet zmínek', type: 'log', tickvals: [1, 10, 50, 100, 150, 200, 500] },
            yaxis: { title: 'Počet politiků' }
        };

        Plotly.newPlot('mentionsHist', data, layout);
    
        var histogramData = @Html.Raw(Json.Serialize(ViewBag.mentionsOfPoliticiansF));

        var politicCount = histogramData.map(data => data.countOfPoliticians);
        var mentionsCount = histogramData.map(data => data.countOfMentions);

        var data = [{
            x: mentionsCount,
            y: politicCount,
            type: 'bar',
            width:0.5
        }];

        var layout = {
            title: 'Histogram četnosti zmínek na Facebooku',
            xaxis: { title: 'Počet zmínek', type: 'log', tickvals: [1, 10, 50, 100, 150, 200, 500] },
            yaxis: { title: 'Počet politiků' }
        };

        Plotly.newPlot('mentionsHistF', data, layout);


        var histogramData = @Html.Raw(Json.Serialize(ViewBag.mentionsOfPoliticiansT));

        var politicCount = histogramData.map(data => data.countOfPoliticians);
        var mentionsCount = histogramData.map(data => data.countOfMentions);

        var data = [{
            x: mentionsCount,
            y: politicCount,
            type: 'bar',
            width:0.5
        }];

        var layout = {
            title: 'Histogram četnosti zmínek na Twitteru',
            xaxis: { title: 'Počet zmínek', type: 'log', tickvals: [1, 10, 50, 100, 150, 200, 500] },
            yaxis: { title: 'Počet politiků' }
        };

        Plotly.newPlot('mentionsHistT', data, layout);


          var layout = {
          yaxis: {
            type: 'log',
            title: 'Value'
          },
      
          title: 'Rozložení počtu zmínek na politika'
        };
        var mentionsCount = @Html.Raw(Json.Serialize(ViewBag.pmfrequency));

        var trace = {
          y: mentionsCount,
          type: 'box'
        };

        var data = [trace];

        Plotly.newPlot('box1', data,layout);

        var mentionsCountF = @Html.Raw(Json.Serialize(ViewBag.pmfrequencyF));
        var mentionsCountT = @Html.Raw(Json.Serialize(ViewBag.pmfrequencyT));
        var trace = {
          y: mentionsCountF,
          type: 'box'
        };
         var trace1 = {
          y: mentionsCountT,
          type: 'box'
        };
   
        var data = [trace,trace1];

        Plotly.newPlot('boxT', data,layout);
    }
    

    function showWordsFrequency(){
        hideAllPlots();
        document.getElementById('wordsStats').style.display = 'flex';
    

        var histogramData = @Html.Raw(Json.Serialize(ViewBag.wordsstatement));
   
        var statementCount = histogramData.map(data => data.statementsCount);
        var wordCount = histogramData.map(data => data.wordCount);

        var data = [{
            x: wordCount,
            y: statementCount,
            type: 'bar',
            width:0.5
        }];

        var layout = {
            title: 'Histogram četnosti slov na vyjádření na všech sociálních sítích',
            xaxis: { title: 'Počet slov', type: 'log', tickvals: [1, 10, 50, 100, 150, 200, 500,1000,5000] },
            yaxis: { title: 'Počet vyjádření' }
        };

        Plotly.newPlot('wordsS', data, layout);


        var histogramData = @Html.Raw(Json.Serialize(ViewBag.wordsstatementF));
   
        var statementCount = histogramData.map(data => data.statementsCount);
        var wordCount = histogramData.map(data => data.wordCount);

        var data = [{
            x: wordCount,
            y: statementCount,
            type: 'bar',width:0.5
        }];

        var layout = {
            title: 'Histogram četnosti slov na vyjádření na Facebooku',
            xaxis: { title: 'Počet slov', type: 'log', tickvals: [1, 10, 50, 100, 150, 200, 500,1000] },
            yaxis: { title: 'Počet vyjádření' }
        };

        Plotly.newPlot('wordsSF', data, layout);

        var histogramData = @Html.Raw(Json.Serialize(ViewBag.wordsstatementT));
   
        var statementCount = histogramData.map(data => data.statementsCount);
        var wordCount = histogramData.map(data => data.wordCount);

        var data = [{
            x: wordCount,
            y: statementCount,
            type: 'bar',
            width:0.5
        }];

        var layout = {
            title: 'Histogram četnosti slov na vyjádření na Twitteru',
            xaxis: { title: 'Počet slov', type: 'log', tickvals: [1, 10, 50, 100, 150, 200, 500] },
            yaxis: { title: 'Počet vyjádření' }
        };

        Plotly.newPlot('wordsST', data, layout);


        var words = @Html.Raw(Json.Serialize(ViewBag.numberWords));
         var layout = {
            height: 600,
          yaxis: {
            type: 'log',tickvals: [10,20,30,40,50,100,200,500,1000,7000],
            title: 'Počet slov'
          },
      
          title: 'Logarithmic Box Plot'
        };
        var trace = {
          y: words,
          type: 'box'
        };
    

        var data = [trace];

        Plotly.newPlot('boxwords', data,layout);

        

        var wordsF = @Html.Raw(Json.Serialize(ViewBag.numberWordsF));
        var wordsT = @Html.Raw(Json.Serialize(ViewBag.numberWordsT));
        var trace = {
          y: wordsF,
          type: 'box',name:""
        };
         var trace1 = {
          y: wordsT,
          type: 'box',name: " "
        };

        var data = [trace,trace1];

        Plotly.newPlot('boxwordsTF', data,layout);

        //with mentions
        var histogramData = @Html.Raw(Json.Serialize(ViewBag.wordsstatementM));

        var statementCount = histogramData.map(data => data.statementsCount);
        var wordCount = histogramData.map(data => data.wordCount);

        var data = [{
            x: wordCount,
            y: statementCount,
            type: 'bar',
            width: 0.5
        }];

        var layout = {
            title: 'Histogram četnosti slov na vyjádření na všech sociálních sítích',
            xaxis: { title: 'Počet slov', type: 'log', tickvals: [1, 10, 50, 100, 150, 200, 500,1000,5000] },
            yaxis: { title: 'Počet vyjádření' }
        };

        Plotly.newPlot('wordsSM', data, layout);


        var histogramData = @Html.Raw(Json.Serialize(ViewBag.wordsstatementFM));

        var statementCount = histogramData.map(data => data.statementsCount);
        var wordCount = histogramData.map(data => data.wordCount);

        var data = [{
            x: wordCount,
            y: statementCount,
            type: 'bar', width: 0.5
        }];

        var layout = {
            title: 'Histogram četnosti slov na vyjádření na Facebooku',
            xaxis: { title: 'Počet slov', type: 'log', tickvals: [1, 10, 50, 100, 150, 200, 500] },
            yaxis: { title: 'Počet vyjádření' }
        };

        Plotly.newPlot('wordsSFM', data, layout);

        var histogramData = @Html.Raw(Json.Serialize(ViewBag.wordsstatementTM));

        var statementCount = histogramData.map(data => data.statementsCount);
        var wordCount = histogramData.map(data => data.wordCount);

        var data = [{
            x: wordCount,
            y: statementCount,
            type: 'bar',
            width: 0.5
        }];

        var layout = {
            title: 'Histogram četnosti slov na vyjádření na Twitteru',
            xaxis: { title: 'Počet slov', type: 'log', tickvals: [1, 10, 50, 100, 150, 200, 500] },
            yaxis: { title: 'Počet vyjádření' }
        };

        Plotly.newPlot('wordsSTM', data, layout);


        var words = @Html.Raw(Json.Serialize(ViewBag.numberWordsM));
        var layout = {
            yaxis: {
                type: 'log',
                title: 'Value'
            },

            title: 'Logarithmic Box Plot'
        };
        var trace = {
            y: words,
            type: 'box'
        };


        var data = [trace];

        Plotly.newPlot('boxwordsM', data, layout);

        var wordsF = @Html.Raw(Json.Serialize(ViewBag.numberWordsFM));
        var wordsT = @Html.Raw(Json.Serialize(ViewBag.numberWordsTM));
        var trace = {
            y: wordsF,
            type: 'box'
        };
        var trace1 = {
            y: wordsT,
            type: 'box'
        };

        var data = [trace, trace1];

        Plotly.newPlot('boxwordsTFM', data, layout);
    }

    function showSentimentGraphs() {



        //extreme sentiments

        var sentimentRatios = @Html.Raw(Json.Serialize(ViewBag.extreme_s));

        console.log(sentimentRatios);
        var politicianNames = [];
        var positiveRatios = [];
        var negativeRatios = [];

       
        for (var key in sentimentRatios) {
            politicianNames.push(key);
            positiveRatios.push(sentimentRatios[key].positiveRatio);
            negativeRatios.push(sentimentRatios[key].negativeRatio);
        }

        
        function createCheckboxes() {
            var listDiv = document.getElementById("politicianList");
            listDiv.innerHTML = ''; 

            politicianNames.forEach((name, index) => {
                var div = document.createElement("div");
                var checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.checked = false; 
                checkbox.value = index;
                checkbox.addEventListener("change", updateChartES);

                var label = document.createElement("label");
                label.textContent = name;
                label.style.marginLeft = "5px";

                div.appendChild(checkbox);
                div.appendChild(label);
                listDiv.appendChild(div);
            });
        }

        
        function updateChartES() {
            var selectedIndices = [];
            document.querySelectorAll("#politicianList input:checked").forEach(checkbox => {
                selectedIndices.push(parseInt(checkbox.value));
            });

            var filteredNames = selectedIndices.map(i => politicianNames[i]);
            var filteredPos = selectedIndices.map(i => positiveRatios[i]);
            var filteredNeg = selectedIndices.map(i => negativeRatios[i]);

            var trace1 = { x: filteredNames, y: filteredPos, name: 'Positive Sentiment', type: 'bar' };
            var trace2 = { x: filteredNames, y: filteredNeg, name: 'Negative Sentiment', type: 'bar' };

            Plotly.react('extreme_s', [trace1, trace2]);
        }

       
        createCheckboxes();
        updateChartES();
        
       

        //sentiment in time

        var sentimentDataTime = @Html.Raw(Json.Serialize(ViewBag.time_sentiment))
         function drawGraph(politician) {
            const data = sentimentDataTime[politician];

            
            const periods = Object.keys(data);
            const sentiments = Object.values(data);

            const trace = {
                x: periods,
                y: sentiments,
                type: 'bar',
                marker: {
                    color: 'rgba(100, 150, 255, 0.7)',
                    line: { color: 'rgba(100, 150, 255, 1)', width: 1.5 }
                }
            };

            const layout = {
                title: `Sentiment politika: ${politician}`,
                xaxis: { title: 'Půlroky', tickangle: -45 },
                yaxis: { title: 'Průměrný sentiment' }
            };

            Plotly.newPlot('sentiment_time', [trace], layout);
        }

        
        const initialPolitician = Object.keys(sentimentDataTime)[0];
        drawGraph(initialPolitician);

        
        document.getElementById('politicianSelectTime').addEventListener('change', function () {
            const selectedPolitician = this.value;
            drawGraph(selectedPolitician);
        });
        //1 - boxplot rozbrazující rozsah sentimentů z příspěvků politiků
        var politicianData = @Html.Raw(Json.Serialize(ViewBag.pol_sentiments));

       var data = Object.keys(politicianData).map(function(politician) {
            return {
                y: politicianData[politician],
                type: 'box',
                name: politician,
                marker: {
                    color: 'rgba(0, 123, 255, 0.5)', 
                },
                line: {
                    color: 'rgba(0, 123, 255, 1)', 
                },
                boxmean: 'sd', 
                boxwidth:8
            };
        });

        var layout = {
            title: 'Rozsah sentimentu v příspěvcích politiků',
            xaxis: {
                title: 'Politici',
                tickmode: 'array',
                tickvals: Object.keys(politicianData),
                tickangle: 45, 
            },
            yaxis: {
                title: 'Sentiment',
                range: [-1, 1], 
            },
            boxmode: 'overlay', 
            bargap: 0,
            bargroupgap: 0, 

            margin: {
                b: 5, 
            },
            width: 1300, 
            height: 600, 
        };

        Plotly.newPlot('sentimentbox', data, layout);

        //1_1 box retweets
        var politicianData = @Html.Raw(Json.Serialize(ViewBag.RTpolsentiments));

        var data = Object.keys(politicianData).map(function (politician) {
            return {
                y: politicianData[politician],
                type: 'box',
                name: politician,
                marker: {
                    color: 'rgba(0, 123, 255, 0.5)',
                },
                line: {
                    color: 'rgba(0, 123, 255, 1)',
                },
                boxmean: 'sd',
                boxwidth: 8
            };
        });

        var layout = {
            title: 'Rozsah sentimentu v retweetech politiků',
            xaxis: {
                title: 'Politici',
                tickmode: 'array',
                tickvals: Object.keys(politicianData),
                tickangle: 45,
            },
            yaxis: {
                title: 'Sentiment',
                range: [-1, 1],
            },
            boxmode: 'overlay',
            bargap: 0,
            bargroupgap: 0,

            margin: {
                b: 5,
            },
            width: 1300,
            height: 600,
        };

        Plotly.newPlot('RTsentimentbox', data, layout);


        //11
        var sentimentResults = @Html.Raw(Json.Serialize(ViewBag.avgrt));
       
        var politician_polarityJSON = JSON.stringify(sentimentResults);
        var parsedpolairities = JSON.parse(politician_polarityJSON);


        var politicians = parsedpolairities.map(function (result) {
            return result.politicId;  
        });


        var formRT = document.getElementById('politicianFormRT');
        politicians.forEach(politician => {
            var div = document.createElement('div');
            div.className = 'form-check';

            var input = document.createElement('input');
            input.type = 'checkbox';
            input.className = 'form-check-input';
            input.id = politician;
            input.value = politician;

            var label = document.createElement('label');
            label.className = 'form-check-label';
            label.htmlFor = politician;
            label.textContent = politician;

            div.appendChild(input);
            div.appendChild(label);
            formRT.appendChild(div);
        });

        function plotGraph2(selectedPoliticians) {
            var plotlyData = [];

           
            var filteredResults = sentimentResults.filter(function (result) {
                return selectedPoliticians.includes(result.politicId.toString()); 
            });

           
            var politicians = filteredResults.map(function (result) {
                return result.politicId; 
            });

            var avgOriginal = filteredResults.map(function (result) {
                return result.avgSentimentOriginal;
            });

            var avgRetweet = filteredResults.map(function (result) {
                return result.avgSentimentRetweet; 
            });

            
            plotlyData.push({
                x: politicians,
                y: avgOriginal,
                name: 'Klasický příspěvek',
                type: 'bar'
            });

            
            plotlyData.push({
                x: politicians,
                y: avgRetweet,
                name: 'Retweet',
                type: 'bar'
            });

            
            var layout = {
                barmode: 'group', 
                title: 'Průměrný sentiment ve vyjádřeních politiků',
                xaxis: {
                    title: 'Politik'
                },
                yaxis: {
                    title: 'Průměrný sentiment'
                },
                width: 1000  
            };

            
            Plotly.newPlot('avgrt', plotlyData, layout);
        }


        
        plotGraph2([]);

        
        formRT.addEventListener('change', () => {
            var selectedOptions = Array.from(formRT.querySelectorAll('input:checked')).map(input => input.value);
            plotGraph2(selectedOptions);
        });

        

        
        
        //2 - rozdělení sentimentu ve všech příspěvcích

         var polaritycounts = @Html.Raw(Json.Serialize(ViewBag.polaritycounts));
         console.log(polaritycounts)
         var data = [
            {
                x: ['neg', 'neu', 'pos'],
                y: [polaritycounts.negative, polaritycounts.neutral, polaritycounts.positive], 
                type: 'bar',
                marker: {
                    color: ['red', 'gray', 'green'] 
                },
            }
        ];

         var layout = {
            title: 'Rozdělení sentimentu ve všech příspěvcích',
            xaxis: {
                title: 'Sentiment'
            },
            yaxis: {
                title: 'Počet příspěvků'
            }
            
            
        };

        
        Plotly.newPlot('polaritybar', data, layout);

        //3 -rozdělení sentimentu ve všech příspěvcích se zmínkami
        var polaritycountsM = @Html.Raw(Json.Serialize(ViewBag.polaritycountsM));
         
         var data = [
            {
                x: ['neg', 'neu', 'pos'], 
                y: [polaritycountsM.negative, polaritycountsM.neutral, polaritycountsM.positive], 
                type: 'bar',
                marker: {
                    color: ['red', 'gray', 'green']
                }
            }
        ];

         var layout = {
            title: 'Rozdělení sentimentu v příspěvcích se zmínkami',
            xaxis: {
                title: 'Sentiment '
            },
            yaxis: {
                title: 'Počet příspěvků'
            }
            
            
            
        };

        
        Plotly.newPlot('polaritybarM', data, layout);
        
        //4 - počet příspěvků s nějakým sentimentem ve kterých je daný politik zmíněn
        var politicianMentions = @Html.Raw(Json.Serialize(ViewBag.mentionspolarity));
        var politicianMentionsJson = JSON.stringify(politicianMentions);
        var parsedMentions = JSON.parse(politicianMentionsJson);

        var politicians = Object.keys(parsedMentions);

        var formM = document.getElementById('politicianFormM');
        politicians.forEach(politician => {
            var div = document.createElement('div');
            div.className = 'form-check';

            var input = document.createElement('input');
            input.type = 'checkbox';
            input.className = 'form-check-input';
            input.id = politician;
            input.value = politician;

            var label = document.createElement('label');
            label.className = 'form-check-label';
            label.htmlFor = politician;
            label.textContent = politician;

            div.appendChild(input);
            div.appendChild(label);
            formM.appendChild(div);
        });

        // Funkce pro vytvoření grafu
        function plotGraph1(selectedPoliticians) {
            // Filtrace dat na základě vybraných politiků
            var filteredPoliticians = selectedPoliticians.length > 0 ? selectedPoliticians : politicians;
            var filteredNegative = filteredPoliticians.map(p => parsedMentions[p].negative);
            var filteredNeutral = filteredPoliticians.map(p => parsedMentions[p].neutral);
            var filteredPositive = filteredPoliticians.map(p => parsedMentions[p].positive);

            var trace1 = {
                x: filteredPoliticians,
                y: filteredNegative,
                name: 'Negative',
                type: 'bar'
            };

            var trace2 = {
                x: filteredPoliticians,
                y: filteredNeutral,
                name: 'Neutral',
                type: 'bar'
            };

            var trace3 = {
                x: filteredPoliticians,
                y: filteredPositive,
                name: 'Positive',
                type: 'bar'
            };

            var data = [trace1, trace2, trace3];

            var layout = {
                barmode: 'group',
                title: 'Sentiment příspěvků kde jsou zmíněni politici',
                xaxis: {
                    title: 'Politik',
                    tickangle: -45
                },
                yaxis: {
                    title: 'Počet zmínek'
                },
                width: 900
            };

            Plotly.newPlot('mentionbar', data, layout);
        }

       
        plotGraph1([]);

        
        formM.addEventListener('change', () => {
            var selectedOptions = Array.from(formM.querySelectorAll('input:checked')).map(input => input.value);
            plotGraph1(selectedOptions);
        });

        //5 - Rozdělení sentimentu ve příspěvcích politiků
        var politician_polarity = @Html.Raw(Json.Serialize(ViewBag.polarity));
        var politician_polarityJSON = JSON.stringify(politician_polarity);
        var parsedpolairities = JSON.parse(politician_polarityJSON);

        
        var politicians = Object.keys(parsedpolairities);

       
        var form = document.getElementById('politicianForm');
        politicians.forEach(politician => {
            var div = document.createElement('div');
            div.className = 'form-check';

            var input = document.createElement('input');
            input.type = 'checkbox';
            input.className = 'form-check-input';
            input.id = politician;
            input.value = politician;

            var label = document.createElement('label');
            label.className = 'form-check-label';
            label.htmlFor = politician;
            label.textContent = politician;

            div.appendChild(input);
            div.appendChild(label);
            form.appendChild(div);
        });

        
        function plotGraph(selectedPoliticians) {
            
            var filteredPoliticians = selectedPoliticians.length > 0 ? selectedPoliticians : politicians;
            var filteredNegative = filteredPoliticians.map(p => parsedpolairities[p].negative);
            var filteredNeutral = filteredPoliticians.map(p => parsedpolairities[p].neutral);
            var filteredPositive = filteredPoliticians.map(p => parsedpolairities[p].positive);

            var trace1 = {
                x: filteredPoliticians,
                y: filteredNegative,
                name: 'Negative',
                type: 'bar'
            };

            var trace2 = {
                x: filteredPoliticians,
                y: filteredNeutral,
                name: 'Neutral',
                type: 'bar'
            };

            var trace3 = {
                x: filteredPoliticians,
                y: filteredPositive,
                name: 'Positive',
                type: 'bar'
            };

            var data = [trace1, trace2, trace3];

            var layout = {
                barmode: 'group',
                title: 'Rozdělení sentimentu ve příspěvcích politiků',
                xaxis: {
                    title: 'Politik',
                    tickangle: -45
                },
                yaxis: {
                    title: 'Počet příspěvků'
                },
                width: 900
            };

            Plotly.newPlot('polaritybar_combined', data, layout);
        }


       
        plotGraph([]);

        
        form.addEventListener('change', () => {
            var selectedOptions = Array.from(form.querySelectorAll('input:checked')).map(input => input.value);
            plotGraph(selectedOptions);
        });

        //6

       /* var months = @Html.Raw(Json.Serialize(ViewBag.months));
        var sentiments = @Html.Raw(Json.Serialize(ViewBag.sentiments));

       
        var data = [{
            x: months,
            y: sentiments,
            type: 'bar'
        }];
        Plotly.newPlot('monthbar', data);*/


        //7
       /* var st_sentiment = @Html.Raw(Json.Serialize(ViewBag.st_sentiment));

        console.log(st_sentiment); 

       
        var m_count = st_sentiment.map(d => d.mentions);
        var sentiment_kor = st_sentiment.map(d => d.sentiment);

        console.log(m_count, sentiment_kor); 

       
        var plotData = [{
            x: m_count,
            y: sentiment_kor,
            mode: 'markers',
            type: 'scatter',
            marker: {
                size: 10,
                color: 'rgba(0, 123, 255, 0.7)', 
            },
            name: 'Data',
        }];

        
        var layout = {
            title: 'Korelace mezi počtem zmínek a sentimentem',
            xaxis: { title: 'Počet zmínek' },
            yaxis: { title: 'Sentiment' },
        };

        Plotly.newPlot('korelace-sentiment-pocetzminek', plotData, layout);*/


        //8
        var server_sentiment = @Html.Raw(Json.Serialize(ViewBag.server_sentiment));
        console.log(server_sentiment)
        
        var plotData = server_sentiment.map(serverData => ({
            type: 'box',
            y: serverData.sentiments,
            name: serverData.server,
            boxmean: 'sd', 
        }));

        
        layout = {
            title: 'Rozdělení sentimentu na různých platformách',
            xaxis: { title: 'Server ' },
            yaxis: { title: 'Sentiment' },
        };

        
        Plotly.newPlot('server-sentiment', plotData, layout);

        //9
        var data = @Html.Raw(Json.Serialize(ViewBag.mcount_sentiment));
        console.log(data)
        
        var mentions = data.map(d => d.count);
        var averageSentiments = data.map(d => d.averageSentiment);

     
        var plotData = [{
            x: mentions,
            y: averageSentiments,
            type: 'bar',
            marker: {
                color: 'rgba(58, 71, 80, 0.6)',
                line: {
                    color: 'rgba(58, 71, 80, 1.0)',
                    width: 2
                }
            },
        }];

     
        var layout = {
            title: 'Průměrný sentiment dle počtu zmínek',
            xaxis: { title: 'Počet zmínek' },
            yaxis: { title: 'Průměrný sentiment' },
            bargap: 0.2 
        };

        
        Plotly.newPlot('mentionscount-sentiment', plotData, layout);


        //10 -RT 
        var classicAvgSentiment = @Html.Raw(Json.Serialize(ViewBag.classicAvg)) ;
        var retweetAvgSentiment = @Html.Raw(Json.Serialize(ViewBag.retweetAvg))

        var data = [{
            x: ['Classic', 'Retweet'],
            y: [classicAvgSentiment, retweetAvgSentiment],
            type: 'bar',
            marker: {
                color: ['blue', 'red'] 
            }
        }];

        
        var layout = {
            title: 'Průměrný sentiment pro klasické a retweetové příspěvky',
            xaxis: {
                title: 'Typ příspěvku'
            },
            yaxis: {
                title: 'Průměrný sentiment'
            }

        };

        
        Plotly.newPlot('RTsentiment', data, layout);
    }
   function showStatistics(){
       hideAllPlots();
       document.getElementById('stats').style.display = 'block';

   }
   function  showSentiment(){
       hideAllPlots();
       
       //showSentimentGraphs();
       document.getElementById('sentiment').style.display = 'block';
       /*document.getElementById('sentimentbox').style.display = 'block';
        document.getElementById('RTsentimentbox').style.display = 'block';
       document.getElementById('polaritybar').style.display = 'block';
       document.getElementById('polaritybarM').style.display = 'block';
        document.getElementById('polaritybar_combined').style.display = 'block';
       document.getElementById('mentionbar').style.display = 'block';
       
        document.getElementById('korelace-sentiment-pocetzminek').style.display = 'block';
        document.getElementById('server-sentiment').style.display = 'block';
        document.getElementById('mentionscount-sentiment').style.display = 'block';
        document.getElementById('RTsentiment').style.display = 'block';
        document.getElementById('avgrt').style.display = 'block';*/
   }

   function showClusters(){
        hideAllPlots();

        document.getElementById('clusters').style.display = 'block';
   }

    function showClusterGraphs() {
        var clusterSentiment = @Html.Raw(Json.Serialize(ViewBag.ClusterSentiment));
    var clusterEthos = @Html.Raw(Json.Serialize(ViewBag.ClusterEthos));
    var clusterPathos = @Html.Raw(Json.Serialize(ViewBag.ClusterPathos));
    var clusterLogos = @Html.Raw(Json.Serialize(ViewBag.ClusterLogos));

 
        for (var clusterId in clusterSentiment) {
            var sentimentData = clusterSentiment[clusterId];
            var ethosData = clusterEthos[clusterId];
            var pathosData = clusterPathos[clusterId];
            var logosData = clusterLogos[clusterId];


            var data = [
                {
                    y: sentimentData,
                    type: 'box',
                    name: 'Sentiment',
                     // Zobrazení bodů (nebo 'outliers' pro zobrazení pouze odlehlých bodů)
                    marker: {
                        color: '#007bff', // Barva boxplotu
                        line: { color: '#0056b3', width: 1 } // Okraje boxplotu
                    }
                },
                {
                    y: ethosData,
                    type: 'box',
                    name: 'Ethos',
                   
                    marker: {
                        color: '#28a745',
                        line: { color: '#218838', width: 1 }
                    }
                },
                {
                    y: pathosData,
                    type: 'box',
                    name: 'Pathos',
                  
                    marker: {
                        color: '#ffc107',
                        line: { color: '#e0a800', width: 1 }
                    }
                },
                {
                    y: logosData,
                    type: 'box',
                    name: 'Logos',
                   
                 
                    marker: {
                        color: '#dc3545',
                        line: { color: '#c82333', width: 1 }
                    }
                }
            ];

            var layout = {
                title: 'Rétorika ve skupině',
                titlefont: { size: 20, color: '#333' },
                yaxis: {
                    gridcolor: '#ccc',
                    tickangle: 45,
                    title: ''
                },
                xaxis: {
                    tickangle: -45,
                    title: ''
                    
                },
               
                autosize: true,
                showlegend: false,
                width: 500,  // Šířka grafu
                height: 400, // Výška grafu
                boxmode: 'overlay',
                bargap: 0,
                bargroupgap: 0
            };

            
            Plotly.newPlot('groupBoxplot ' + clusterId, data, layout);
        }
        var clusterEntities = @Html.Raw(Json.Serialize(ViewBag.ClusterEntities));
        var clusterTopics = @Html.Raw(Json.Serialize(ViewBag.ClusterTopics));


        for (var clusterId in clusterEntities) {
            var entityCounts = clusterEntities[clusterId];
            var topicCounts = clusterTopics[clusterId];

            
            var entityData = {
                labels: Object.keys(entityCounts),
                values: Object.values(entityCounts),
                type: 'pie'
            };

            var entityLayout = {
                title: 'Nejčastější entity ve skupinu',
                width:500,
                showlegend: true,
                autosize: true,
                margin: { l: 0, r: 0, t: 10, b: 10 },
                    legend: {
                    x: 1.1,  // Posune legendu doprava
                    y: 0.5
                }

            };

            Plotly.newPlot('entityGraph ' + clusterId, [entityData], entityLayout);

            
            var topicData = {
                labels: Object.keys(topicCounts),
                values: Object.values(topicCounts),
                type: 'pie'
            };

            var topicLayout = {
                title: 'Nejčastější témata ve skupině',
                width: 500,
                showlegend:true,
                autosize: true,
                margin: { l: 0, r: 0, t: 10, b: 10 },
                legend: {
                    x: 1.1,  // Posune legendu doprava
                    y: 0.5
                }
            };

            Plotly.newPlot('topicGraph ' + clusterId, [topicData], topicLayout);
        }
    }
   function showNerGraphs(){
        var data_er = @Html.Raw(Json.Serialize(ViewBag.PoliticianRatios));

        var politicians = Object.keys(data_er);
        var ratios = Object.values(data_er);

        var listDiv = document.getElementById('politician-list-er');

        
        function updateChartER() {
            var selectedPoliticians = [];
            var selectedRatios = [];

            politicians.forEach((politician, index) => {
                var checkbox = document.getElementById('cb_' + index);
                if (checkbox.checked) {
                    console.log(politician)
                    console.log(data_er[politician])
                    selectedPoliticians.push(politician);
                    selectedRatios.push(data_er[politician]);
                }
            });

            Plotly.newPlot('entity_ratio', [{
                x: selectedPoliticians,
                y: selectedRatios,
                type: 'bar'
            }], {
                title: 'Politician Entity-to-Word Ratio',
                xaxis: { title: 'Politician' },
                yaxis: { title: 'Entity-to-Word Ratio' }
            });
        }

        
        politicians.forEach((politician, index) => {
            var div = document.createElement('div');
            var checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.value = politician;
            checkbox.checked = false;
            checkbox.id = 'cb_' + index;
            checkbox.addEventListener('change', updateChartER);

            var label = document.createElement('label');
            label.htmlFor = 'cb_' + index;
            label.textContent = politician;

            div.appendChild(checkbox);
            div.appendChild(label);
            listDiv.appendChild(div);
        });

        
        updateChartER();
       
       //ner year pie chart
        var data = @Html.Raw(Json.Serialize(ViewBag.babis_year_ent));
        
        Object.keys(data).forEach(function (year) {
            var entityData = data[year];
            var labels = Object.keys(entityData); 
            var values = Object.values(entityData); 

            var pieData = [{
                values: values,
                labels: labels,
                type: 'pie',
                textinfo: 'label+percent',
                hoverinfo: 'label+value'
            }];

            var layout = {
               
                height: 400,
                width: 600
            };
            console.log(year)
            Plotly.newPlot('pie_chart_ner-' + year, pieData, layout);
        });
       //barplot1-nejčastější typy
        var entityTypes = @Html.Raw(Json.Serialize(ViewBag.entityTypes));
        var typeCounts = @Html.Raw(Json.Serialize(ViewBag.typeCounts));

        
        var data = [{
            x: entityTypes,
            y: typeCounts,
            type: 'bar'
        }];

        var layout = {
            title: 'Nejčastější typy entit',
            xaxis: { title: 'Typ' },
            yaxis: { title: 'Počet výskytů' }
        };

        Plotly.newPlot('entitytype_bar', data, layout);

        //barplot_sentiment
        var entitySentiments = @Html.Raw(Json.Serialize(ViewBag.EntitySentiments));
        console.log("Data:", entitySentiments);

        function updateChart() {
            var selectedEntityType = document.getElementById('entityTypeSelect').value;

            
            var filteredData = entitySentiments.filter(function (item) {
                return  item.entityType === selectedEntityType;
            });

            filteredData.sort(function (a, b) {
                return a.averageSentiment - b.averageSentiment;
            });

            var entityNames = filteredData.map(function (item) { return item.entityName; });
            var averageSentiments = filteredData.map(function (item) { return item.averageSentiment; });
            
            
            var trace = {
                x: entityNames,
                y: averageSentiments,
                type: 'bar'
            };

            var layout = {
                title: 'Průměrný sentiment nejzmiňovanějších entit',
                xaxis: { title: 'Název entity' },
                yaxis: { title: 'Average Sentiment' }
            };

            Plotly.newPlot('sentimentBarplot', [trace], layout);

            //boxplot
           

            var boxTraces = filteredData.map(function (item) {
                return {
                    y: item.sentiments,
                    type: 'box',
                    name: item.entityName
                };
            });

            var boxLayout = {
                title: 'Rozsah sentimentu příspěvků s entitami',
                xaxis: { title: 'Název entity' },
                yaxis: { title: 'Sentiment' }
            };

            Plotly.newPlot('sentimentboxEntity', boxTraces, boxLayout);
            
        }

       
        document.getElementById('entityTypeSelect').value = document.getElementById('entityTypeSelect').options[0].value;
        updateChart();  

        
        document.getElementById('entityTypeSelect').addEventListener('change', function () {
            updateChart(); 
        });

        //heatmap-spoluvyskyt

        var xLabels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(topEntities));
        var zData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
            Enumerable.Range(0, cooccurrenceMatrix.GetLength(0))
            .Select(i => Enumerable.Range(0, cooccurrenceMatrix.GetLength(1))
            .Select(j => cooccurrenceMatrix[i, j])
            .ToArray())
            .ToArray()
            ));

        
        var trace = {
            z: zData,
            x: xLabels,
            y: xLabels,
            type: 'heatmap',
            colorscale: 'Viridis'
        };

        var layout = {
            title: 'Spoluvýskyt entit',
            xaxis: { title: 'Entity', automargin: true },
            yaxis: { title: 'Entity', automargin: true }
        };

        Plotly.newPlot('heatmap_cooc', [trace], layout);

       


        
   }
   function showNer(){
        hideAllPlots();
       //showNerGraphs();
        document.getElementById('ner').style.display = 'block';
        
        
     
   }
   function showRhetoricsGraphs(){

       //histogram
        var histogramData = @Html.Raw(Json.Serialize(ViewBag.rh_hist));
        var binLabels = ["0-0.1", "0.1-0.2", "0.2-0.3", "0.3-0.4", "0.4-0.5",
            "0.5-0.6", "0.6-0.7", "0.7-0.8", "0.8-0.9", "0.9-1.0"];

        var traces = [];

        Object.keys(histogramData).forEach(function (category) {
            traces.push({
                x: binLabels,
                y: histogramData[category],
                type: 'bar',
                name: category
            });
        });

        var layout = {
            title: "Histogram retorických vlastností",
            barmode: 'group',
            xaxis: { title: "Rozsah hodnot" },
            yaxis: { title: "Počet vyjádření" }
        };

        Plotly.newPlot('rh_hist', traces, layout);

        //boxplot
        var boxplotData = @Html.Raw(Json.Serialize(ViewBag.rh_box));

        var traces = [];

        Object.keys(boxplotData).forEach(function (category) {
            traces.push({
                y: boxplotData[category],
                type: 'box',
                name: category,
                boxmean: 'sd', 
            });
        });

        var layout = {
            title: "Rozložení rétoriky v textech",
            xaxis: { title: "" },
            yaxis: { title: "" },
            boxmode: 'group'
        };

        Plotly.newPlot('rh_box', traces, layout);
   }
   function showRhetorics(){
        hideAllPlots();
        //showRhetoricsGraphs();
        document.getElementById('rhetorics').style.display = 'block';
   }
    $(document).ready(function () {
        
        $('.sortable th').click(function () {
            
            $(this).siblings().removeClass('active1');         
            $(this).addClass('active1');
            var columnIndex = $(this).index(); 
            var isAscending = $(this).hasClass('asc');           
            sortTable($(this).closest('table'), columnIndex, isAscending);
            $(this).toggleClass('asc').toggleClass('desc', !isAscending);
        });
    

    $('#showTable').click(function () {
      
        $('#t').addClass('active');
        $('#tm').removeClass('active');
       
        $(this).addClass('active');
        $('#showTableM').removeClass('active');
    });

    
    $('#showTableM').click(function () {
     
        console.log("showM");
        $('#tm').addClass('active');
        $('#t').removeClass('active');
        
        $(this).addClass('active');
        $('#showTable').removeClass('active');
    });
    });
    function sortTable(table, columnIndex, isAscending) {
        var rows = table.find('tbody tr').get();
        rows.sort(function (rowA, rowB) {
        
            var cellA = parseFloat($(rowA).children('td').eq(columnIndex).text());
            var cellB = parseFloat($(rowB).children('td').eq(columnIndex).text());
            
            if (cellA < cellB) return isAscending ? -1 : 1;
            if (cellA > cellB) return isAscending ? 1 : -1;
            return 0;
        });
        
        $.each(rows, function (index, row) {
            table.find('tbody').append(row);
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
        showAllPlots();
    });

</script>

<div id="clusters">
    <h2>Rétorické skupiny</h2>
    <div class="row">
        @foreach (var cluster in ViewBag.ClusterEntities as Dictionary<int, Dictionary<string, int>>)
        {
            int clusterId = cluster.Key;

            <div class="col-md-4">
                <div class="cluster-container">
                    <h3>Skupina @clusterId</h3>
                    <div class="cluster-content">
                      
                        <div class="cluster-boxplot">
                           
                            <div id="groupBoxplot @clusterId" class="graph-container"></div>
                        </div>

                       
                        <div class="cluster-entity">
                            
                            <div id="entityGraph @clusterId" class="graph-container"></div>
                        </div>

                        
                        <div class="cluster-topic">
                            
                            <div id="topicGraph @clusterId" class="graph-container"></div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

</div>


<div id="rhetorics">
    <div id="rh_hist" style="width: 100%; height: 500px;"></div>
    <div id="rh_box" style="width: 100%; height: 500px;"></div>
</div>
<div id="ner">
    

    
    <div style="display: flex;">
        
        <div style="width: 200px; padding-right: 20px;">
            <h3>Vyberte politiky:</h3>
            <div id="politician-list-er"></div>
        </div>

        
        <div id="entity_ratio" style="width: 600px;"></div>
    </div>

    @if (babis_entity != null)
    {
        <div class="chart-container">
            @foreach (var year in babis_entity.Keys)
            {
                <div class="chart-item">
                    <h3>@year</h3>
                    <div id="pie_chart_ner-@year" style="width: 100%; height: 400px;"></div>
                </div>
            }
        </div>
    }

    <div id="entitytype_bar" style="width: 100%; height: 500px;"></div>

   

    
    <label for="entityTypeSelect">Vyberte typ:</label>
    <select id="entityTypeSelect" onchange="updateChart()">
        
        @foreach (var type in alltypes)
        {
            <option value="@type">@type</option>
        }
    </select>

   
    <div id="sentimentBarplot" style="width: 100%; height: 500px;"></div>
    <div id="sentimentboxEntity" style="width: 100%; height: 500px;"></div>
    <div id="heatmap_cooc" style="width:1000px; height: 1000px;"></div>
        <!--
    <table class="table table-bordered table-sm entity-table">
        <thead>
            <tr>
                <th>Název entity</th>
                <th>Počet výskytů</th>
                <th>Average Sentiment</th> 
            </tr>
        </thead>
        <tbody>
            @if (ViewBag.ner_counts != null && ((List<KeyValuePair<string, int>>)ViewBag.ner_counts).Any())
            {
                var sentiments = ViewBag.ner_sentiment as Dictionary<string, double>; 
                
                foreach (var entity in (List<KeyValuePair<string, int>>)ViewBag.ner_counts)
                {
                    <tr>
                        <td>@entity.Key</td>
                        <td>@entity.Value</td>
                        <td>
                            @if (sentiments != null && sentiments.ContainsKey(entity.Key))
                            {
                                @sentiments[entity.Key].ToString("F2")
                            }
                            else
                            {
                                <span class="text-muted">N/A</span> 
                            }
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="3" class="text-center text-muted no-data">No data available</td>
                </tr>
            }
        </tbody>
    </table>
    -->
    @{
        var groupedEntities = ViewBag.nercounts_types as Dictionary<string, List<KeyValuePair<string, int>>>;
    }
    
    <table class="table table-bordered grouped-entity-table">
        <thead>
            <tr>
                @foreach (var entityType in groupedEntities.Keys)
                {
                    <th>@entityType</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (groupedEntities != null)
            {
                
                var maxEntitiesCount = groupedEntities.Max(g => g.Value.Count);

                
                for (int i = 0; i < maxEntitiesCount; i++)
                {
                    <tr>
                        @foreach (var entityType in groupedEntities.Keys)
                        {
                            var entity = groupedEntities[entityType].ElementAtOrDefault(i);
                            var sentiment = entitySentiments.Where(x => x.EntityName == entity.Key && x.EntityType == entityType).Select(x => x.AverageSentiment).FirstOrDefault();
                            sentiment = Math.Round(sentiment, 2);
                            <td>
                                @if (entity.Key != null)
                                {
                                    <text>
                                        <strong>@entity.Key</strong>:
                                        <p>Počet výskytů: @entity.Value </p>
                                        <p>Prům. sentiment: @sentiment</p>
                                    </text>
                                }
                                else
                                {
                                    @("-")
                                }
                            </td>
                        }
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="100%" class="text-center no-data">No data available</td>
                </tr>
            }
        </tbody>
    </table>

</div>

<div id="sentiment">
    <h2>Analýza sentimentu</h2>

    <div style="text-align: center;">
        <div style="display: inline-block; margin: 10px; width: 45%; vertical-align: top;">
            <h3>Průměrný sentimentu ve vyjádřeních</h3>
            <table id="avg-combined-table" class="table table-bordered table-striped">
                <thead class="thead-light">
                    <tr>
                        <th>Politik</th>
                        <th>Průměrný Sentiment</th>
                        <th>Průměrný sentiment se zmínkami</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ViewBag.avg_combined)
                    {
                        <tr class="table-row" style="display: @(ViewBag.avg_combined.IndexOf(item) >= 10 ? "none" : "table-row");">
                            <td>@item.OsobaID</td>
                            <td>@item.AverageSentiment1 (@item.count příspěvků)</td>
                            <td>@(item.AverageSentiment2 == 100 ? "-" : $"{item.AverageSentiment2} (@{item.count_m} příspěvků)")</td>
                        </tr>
                    }
                </tbody>
            </table>
            <button class="btn btn-primary" onclick="showMore('avg-combined-table', this)">Zobrazit více</button>
        </div>
        <div style="display: inline-block; margin: 10px; width: 45%; vertical-align: top;">
            <h3>Průměrný sentiment ve zmínkách</h3>
            <table id="avgsentimentFM" class="table table-bordered table-striped">
                <thead class="thead-light">
                    <tr>
                        <th>Politik</th>
                        <th>Průměrný sentiment</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ViewBag.avgsentimentFM)
                    {
                        <tr class="table-row" style="display: @(ViewBag.avgsentimentFM.IndexOf(item) >= 10 ? "none" : "table-row");">
                            <td>@item.OsobaID</td>
                            <td>@item.AverageSentiment (@item.Count_m zmínek)</td>
                        </tr>
                    }
                </tbody>
            </table>
            <button class="btn btn-primary" onclick="showMore('avgsentimentFM', this)">Zobrazit více</button>
        </div>
    </div>

    <div style="display: flex; gap: 20px;">    
        <div id="politicianList" style="overflow-y: auto;max-height: 400px; min-width: 200px;"></div>
        <div id="extreme_s" style="flex-grow: 1;"></div>
    </div>



    <div class="container_time">
        
        <div class="dropdown_time">
            <label for="politicianSelectTime">Vyberte politika:</label>
            <select id="politicianSelectTime">
                @foreach (var politician in sentimentData.Keys)
                {
                    <option value="@politician">@politician</option>
                }
            </select>
        </div>

        
        <div id="sentiment_time" style="width: 100%; max-width: 800px; height: 400px;"></div>
    </div>

    <div style="text-align: center;">
        <div id="polaritybar" style="display: inline-block; width: 45%; margin: 10px; vertical-align: top;"></div>
        <div id="polaritybarM" style="display: inline-block; width: 45%; margin: 10px; vertical-align: top;"></div>
    </div>

    <div id="sentimentbox"></div>
    <div id="RTsentimentbox"></div>

    <div class="container mt-4">
        <div class="row">

            <div class="col-md-4">
                <h5>Vyberte politiky:</h5>
                <form id="politicianFormRT" class="form-group overflow-auto" style="max-height: 400px; border: 1px solid #ccc; padding: 10px; border-radius: 5px;">
                </form>
            </div>


            <div class="col-md-8 graphbar">
                <div id="avgrt"></div>
            </div>
        </div>
    </div>

    <div class="container mt-4">
        <div class="row">
          
            <div class="col-md-4">
                <h5>Vyberte politiky:</h5>
                <form id="politicianForm" class="form-group overflow-auto" style="max-height: 400px; border: 1px solid #ccc; padding: 10px; border-radius: 5px;">
             
                </form>
            </div>


            <div class="col-md-8 graphbar">
                <div id="polaritybar_combined"></div>
            </div>
        </div>
    </div>

    <div class="container mt-4">
        <div class="row">
            
            <div class="col-md-4">
                <h5>Vyberte politiky:</h5>
                <form id="politicianFormM" class="form-group overflow-auto" style="max-height: 400px; border: 1px solid #ccc; padding: 10px; border-radius: 5px;">
                   
                </form>
            </div>

            
            <div class="col-md-8 graphbar">
                <div id="mentionbar"></div>
            </div>
        </div>
    </div>
    <div id="korelace-sentiment-pocetzminek"></div>
    <div id="server-sentiment" style="width:100%;max-width:700px;height:500px;"></div>
    <div id="mentionscount-sentiment" style="width:100%;max-width:700px;height:500px;"></div>
    <div id="RTsentiment"></div>
    


</div>
<div id="stats" class="container" style="display:none">
    

                <h2>Statistiky vyjádření</h2>
               <table class="table table-bordered table-striped sortable">
                    <thead class="thead-light">
                        <tr>
                            <th></th>
                            <th>Všechna vyjádření</th>
                            <th>Vyjádření se zmínkami</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Nejaktivnější politik</td>
                            <td>@ViewBag.maxstatements</td>
                            <td>@ViewBag.maxstatementsM</td>
                        </tr>
                        <tr>
                            <td>Nejzmiňovanější politik</td>
                            <td>@ViewBag.max</td>
                            <td>@ViewBag.max</td>
                        </tr>
                        <tr>
                            <td>Průměrný počet zmínek za vyjádření</td>
                            
                            <td>@string.Format("{0:0.00}", @ViewBag.avg)</td>
                            <td>@string.Format("{0:0.00}", @ViewBag.avgM)</td>

                        </tr>
                        <tr>
                            <td>Průměrný počet slov za vyjádření</td>
                            
                            <td>@string.Format("{0:0.00}", @ViewBag.avgwordsoverall)</td>
                            <td>@string.Format("{0:0.00}", @ViewBag.avgwordsoverallM)</td>

                        </tr>
                        <tr>
                            <td>Medián počtu slov za vyjádření</td>
                            
                            <td>@string.Format("{0:0.00}", @ViewBag.medianwordsoverall)</td>
                            <td>@string.Format("{0:0.00}", @ViewBag.medianwordsoverallM)</td>

                        </tr>
                       
                    </tbody>
                </table>

                <h2>Statistika  politiků</h2>
    <div>
        <button id="showTable" class="switch-button active">Statistika ze všech vyjádření</button>
        <button id="showTableM" class="switch-button">Statistika z vyjádření se zmínkami</button>
    </div>

    <div id="t" class="table-container active">
    <table  class="table table-bordered table-striped sortable">
        <thead class="thead-light">
            <tr>
                <th class="sortable">Politik &#x25B2;&#x25BC;</th>

                <th class="sortable">Průměrný počet slov &#x25B2;&#x25BC;</th>
                <th class="sortable">Medián počtu slov &#x25B2;&#x25BC;</th>
                <th class="sortable">Počet zmínek ostatními politiky &#x25B2;&#x25BC;</th>
                <th class="sortable">Počet zmínek ostatnímich politiků &#x25B2;&#x25BC;</th>
                <th class="sortable">Průměrný počet zmínek &#x25B2;&#x25BC;</th>
                <th class="sortable">Celkový počet slov &#x25B2;&#x25BC;</th>

               
            </tr>
        </thead>
        <tbody>
            @foreach (var politician in ViewBag.mentions)
            {
                var sortedMentions = politician.Value;
                string pid = politician.Key;

                <tr>
                    <td>
                        @Html.ActionLink(pid, "PoliticDetail", "Home", new { politic_id = pid, sumwords = ViewBag.sumwords[pid], avgwords = ViewBag.avgwords[pid], avgmentions = ViewBag.avgmentions[pid] })
                    </td>
                    
                        <td>@string.Format("{0:0.00}", @ViewBag.avgwords[pid])</td>
                         <td>@string.Format("{0:0.00}", @ViewBag.medianwords[pid])</td>
                        @if (ViewBag.mentionsCount.ContainsKey(pid))
                        {
                            var count = ViewBag.mentionsCount[pid];
                        <td>
                            @count
                        </td>
                        }
                        else
                        {
                        <td>
                            0
                        </td>
                        }
                        @if (ViewBag.mentionsCountR.ContainsKey(pid))
                        {
                            var count = ViewBag.mentionsCountR[pid];
                        <td>
                            @count
                        </td>
                        }
                        else
                        {
                        <td>
                            0
                        </td>
                        }
                        <td>@string.Format("{0:0.00}", @ViewBag.avgmentions[pid])</td>

                    <td>@ViewBag.sumwords[pid]</td>
                    
                </tr>
            }
        </tbody>
    </table>
    </div>
    <div id="tm" class="table-container">
    <table  class="table table-bordered table-striped sortable">
        <thead class="thead-light">
            <tr>
                <th class="sortable">Politik &#x25B2;&#x25BC;</th>

                <th class="sortable">Průměrný počet slov &#x25B2;&#x25BC;</th>
                <th class="sortable">Medián počtu slov &#x25B2;&#x25BC;</th>
                <th class="sortable">Počet zmínek ostatními politiky &#x25B2;&#x25BC;</th>
                <th class="sortable">Počet zmínek ostatních politiků &#x25B2;&#x25BC;</th>
                <th class="sortable">Průměrný počet zmínek &#x25B2;&#x25BC;</th>
                <th class="sortable">Celkový počet slov &#x25B2;&#x25BC;</th>


            </tr>
        </thead>
        <tbody>
            @foreach (var politician in ViewBag.mentionsM)
            {
                
                string pid = politician.Key;

                <tr>
                    <td>
                        @Html.ActionLink(pid, "PoliticDetail", "Home", new { politic_id = pid, sumwords = ViewBag.sumwordsM[pid], avgwords = ViewBag.avgwordsM[pid], avgmentions = ViewBag.avgmentionsM[pid] })
                    </td>
                    <td>@ViewBag.avgwordsM[pid]</td>
                    <td>@ViewBag.medianwordsM[pid]</td>
                    @if (ViewBag.mentionsCountM.ContainsKey(pid))
                    {
                        var count = ViewBag.mentionsCountM[pid];
                        <td>
                            @count
                        </td>
                    }
                    else
                    {
                        <td>
                            0
                        </td>
                    }
                    @if (ViewBag.mentionsCountRM.ContainsKey(pid))
                    {
                        var count = ViewBag.mentionsCountRM[pid];
                        <td>
                            @count
                        </td>
                    }
                    else
                    {
                        <td>
                            0
                        </td>
                    }
                    <td>@ViewBag.avgmentionsM[pid]</td>
                    <td>@ViewBag.sumwordsM[pid]</td>

                </tr>
            }
        </tbody>
    </table>
    </div>
    
    
   
</div>