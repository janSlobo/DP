 
@{
    ViewData["Title"] = "Sentiment";
    var sentimentData = ViewBag.time_sentiment as Dictionary<string, Dictionary<string, double>>;
    var avg_combined = ViewBag.avg_combined as Dictionary<string, List<CombinedPoliticianSentiment>>;
    var avgsentimentFM = ViewBag.avgsentimentFM as Dictionary<string, List<PoliticianSentimentM>>;
}


<script>
    var toppoliticians = [
        "andrej-babis", "tomio-okamura", "lubomir-volny", "adam-vojtech", "miroslav-kalousek",
        "alena-schillerova", "pavel-belobradek", "petr-fiala", "karel-havlicek", "milos-zeman"
    ]
      var heightValue = 420;
    var widthValue = 450;

    var biggerWidth = 720;
    var currentPage = 1;
    var rowsPerPage = 10;  
    var rows = [];
    var totalPages = 1;
    var politicianData = @Html.Raw(Json.Serialize(ViewBag.pol_sentiments));
    var politicianDataM = @Html.Raw(Json.Serialize(ViewBag.mentions_sent));
    var polaritycounts = @Html.Raw(Json.Serialize(ViewBag.polaritycounts));
  
    var polaritycountsM = @Html.Raw(Json.Serialize(ViewBag.polaritycountsM));
    var yearS;
    var classicAvgSentiment = @Html.Raw(Json.Serialize(ViewBag.classicAvg)) ;
    var retweetAvgSentiment = @Html.Raw(Json.Serialize(ViewBag.retweetAvg));
    var server_sentiment = @Html.Raw(Json.Serialize(ViewBag.server_sentiment));
    //var politicianDataRT = @Html.Raw(Json.Serialize(ViewBag.RTpolsentiments));
    var sentimentRatios = @Html.Raw(Json.Serialize(ViewBag.extreme_s));
    var sentimentResults = @Html.Raw(Json.Serialize(ViewBag.avgrt));
    var avgCombinedByYear = @Html.Raw(Json.Serialize(ViewBag.avg_combined));
    var avgsentimentFMByYear = @Html.Raw(Json.Serialize(ViewBag.avgsentimentFM));
    var sentimentTime = @Html.Raw(Json.Serialize(ViewBag.MonthlySentiment));
    var config = {
        displayModeBar: false, responsive: true
    };
    function changeModel(model){
        console.log(model)
        const url = new URL(window.location.href);
        url.searchParams.set("model", model);
        window.location.href = url.toString();
    }
    function updateStatistics(selectedYear){
        yearS = selectedYear.toString();
        createCheckboxesBox(politicianData,"politicianListBox", showboxRozsah, yearS);
        createCheckboxesBox(politicianDataM,"politicianListBoxM", showboxRozsahM, yearS);
        //createCheckboxesBox("politicianListBoxRT", showboxRozsahRT, yearS)
        document.getElementById("sortBy").value = "postCount";
        document.getElementById("sortOrder").value = "desc";

        showpolaritycounts(yearS);
        //showpolaritycountsB(yearS);
        showpolaritycountsm(yearS);
        showboxRozsah();
        showboxRozsahM();
        renderSentimentTime();
        //showavgsent(yearS);
        showserversent(yearS);
        //showboxRozsahRT();
        createCheckboxes(yearS);
        updateChartES();
        createCheckboxesAvgRT()
        var formRT = document.getElementById('politicianFormRT');
        var selectedOptions = Array.from(formRT.querySelectorAll('input:checked')).map(input => input.value);
        plotGraph2(selectedOptions);
        updateTable();

    }

    function renderSentimentTime() {
        var year = yearS;
        var sentimentM = sentimentTime[year] || sentimentTime["all"];

        if (sentimentTime[year]) {
            var allMonths = ["Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec"];

            var dates = allMonths
            var sentimentValues = allMonths.map(function (month, index) {

                var monthKey = (index + 1).toString().padStart(2, '0');


                return sentimentM.hasOwnProperty(monthKey) ? sentimentM[monthKey] : 0;
            });

           
            var trace = {
                x: dates,  
                y: sentimentValues,  
                type: 'scatter',
                mode: 'lines+markers', 

                line: { shape: 'linear' },  
                marker: { color: 'blue' }
            };

            var layout = {
                title: '',
                xaxis: { title: '', tickangle: 45 },
                yaxis: { title: 'Průměrný sentiment' },
                showlegend: false, autosize:true,
                innerWidth: null,
                margin: {
                    l: 55,
                    r: 25,
                    t: 50,
                    b: 55
                }
            };

        
            Plotly.newPlot('sentimenttime', [trace], layout,config);
        } else {
            var allHalfYears = Object.keys(sentimentM);

            
            var sentimentValues = allHalfYears.map(function (halfYear) {
                return sentimentM.hasOwnProperty(halfYear) ? sentimentM[halfYear] : 0; 
            });

           
            var trace = {
                x: allHalfYears,  
                y: sentimentValues,  
                type: 'scatter',
                mode: 'lines+markers', 
                line: { shape: 'linear' }, 
                marker: { color: 'blue' }
            };

            var layout = {
                title: '',
                xaxis: { title: '', tickmode: 'array', tickvals: allHalfYears,tickangle:45 },  
                yaxis: { title: 'Průměrný sentiment' },
                showlegend: false, autosize:true,
                innerWidth: null,
                margin: {
                    l: 55,
                    r: 25,
                    t: 50,
                    b: 55
                }
            };

        
            Plotly.newPlot('sentimenttime', [trace], layout,config);
        }
       
    }

    function updateTable() {
        var year = yearS;
        var minPostCount = document.getElementById("minPostCount");
        minPostCount.value = 0;
        console.log(year)
        var combinedData = avgCombinedByYear[year] || avgCombinedByYear["all"];
        var sentimentData = avgsentimentFMByYear[year] || avgsentimentFMByYear["all"];

        
        var avgCombinedDict = {};
        combinedData.forEach(function (item) {
            avgCombinedDict[item.osobaID] = item;
        });

        var avgSentimentFMDict = {};
        sentimentData.forEach(function (item) {
            avgSentimentFMDict[item.osobaID] = item;
        });

    
        var allPoliticians = new Set([...Object.keys(avgCombinedDict), ...Object.keys(avgSentimentFMDict)]);

    
        var tableBody = document.querySelector("#merged-sentiment-table tbody");
        tableBody.innerHTML = '';

     
        rows = [];
        allPoliticians.forEach(function (osobaID) {
            var avgData = avgCombinedDict[osobaID] || null;
            var mentionData = avgSentimentFMDict[osobaID] || null;

            var row = document.createElement("tr");
            row.innerHTML = `
                <td>${osobaID}</td>
                <td>${avgData ? avgData.averageSentiment1.toFixed(2) : '--'}</td>
                <td>${avgData ? avgData.count : 0}</td>
                <td>${mentionData ? mentionData.averageSentiment.toFixed(2) : '--'}</td>
                <td>${mentionData ? mentionData.count_m : 0}</td>
            `;
            rows.push(row);
        });

      
        totalPages = Math.ceil(rows.length / rowsPerPage);
        document.getElementById("totalPages").textContent = totalPages;
        currentPage = 1; 

        renderTable();
    }

    function renderTable() {
        var tableBody = document.querySelector("#merged-sentiment-table tbody");
        tableBody.innerHTML = '';

      
        var start = (currentPage - 1) * rowsPerPage;
        var end = start + rowsPerPage;
        var currentRows = rows.slice(start, end);

        currentRows.forEach(function (row) {
            tableBody.appendChild(row);
        });

      
        document.getElementById("pageNumber").textContent = currentPage;
    }

    function changePage(direction) {
        currentPage += direction;
        if (currentPage < 1) currentPage = 1;
        if (currentPage > totalPages) currentPage = totalPages;

        renderTable();
    }
    function showpolaritycountsm(year) {
        polaritycountsMY = polaritycountsM[year] || polaritycountsM["all"]

        var trace = {
            x: polaritycountsMY,
            type: 'histogram',
            xbins: { size: 0.2 },
            marker: {
                color: 'rgba(55, 128, 191, 0.7)',
                line: {
                    color: 'rgba(55, 128, 191, 1)',
                    width: 1
                }
            }

        };

        var layout = {
            title: '',
            xaxis: { title: '', range: [-1, 1] },
            autosize:true,
            innerWidth: null,
            margin: {
                l: 35,
                r: 5,
                t: 20,
                b: 45
            }
        };


        Plotly.newPlot('polaritybarM', [trace], layout,config);
    }
    function showpolaritycounts(year) {
        polaritycountsY = polaritycounts[year] || polaritycounts["all"];

        var binEdges = [-1, -0.9, -0.7, -0.5, -0.3, -0.1,0, 0.1, 0.3, 0.5, 0.7, 0.9, 1];

        var trace = {
            x: polaritycountsY,
            type: 'histogram',
            xbins: {
                start: -1.1,  
                end: 1,    
                size: 0.2    
            },
            marker: {
                color: 'rgba(55, 128, 191, 0.7)',
                line: {
                    color: 'rgba(55, 128, 191, 1)',
                    width: 1
                }
            }
        };

        var layout = {
            title: '',
            xaxis: {
                title: '',
                range: [-1, 1],
                tickvals: binEdges,  
                ticktext: binEdges.map(v => v.toFixed(1)) 
            },
            autosize:true,
            margin: {
                l: 35,
                r: 5,
                t: 20,
                b: 45
            }
        };

        Plotly.newPlot('polaritybar', [trace], layout,config);
    }

    function showpolaritycountsB(year) {
        polaritycountsY = polaritycountsB[year] || polaritycountsB["all"]
        var binEdges = [-1, -0.9, -0.7, -0.5, -0.3, -0.1, 0, 0.1, 0.3, 0.5, 0.7, 0.9, 1];

        var trace = {
            x: polaritycountsY,
            type: 'histogram',
            xbins: {
                start: -1.1,  
                end: 1,     
                size: 0.2   
            },
            marker: {
                color: 'rgba(55, 128, 191, 0.7)',
                line: {
                    color: 'rgba(55, 128, 191, 1)',
                    width: 1
                }
            }
        };

        var layout = {
            title: '',
            xaxis: {
                title: '',
                range: [-1, 1],
                tickvals: binEdges,   
                ticktext: binEdges.map(v => v.toFixed(1)) 
            },
            autosize:true,
            margin: {
                l: 35,
                r: 5,
                t: 50,
                b: 45
            }
        };


        Plotly.newPlot('polaritybarB', [trace], layout,config);
    }
    function showavgsent(year) {
        var classicAvg = classicAvgSentiment[year] || classicAvgSentiment["all"]
        var retweetavg = retweetAvgSentiment[year] || retweetAvgSentiment["all"]
        var data = [{
            x: ['Klasický', 'Retweet'],
            y: [classicAvg, retweetavg],
            type: 'bar',
            marker: {
                color: ['blue', 'red']
            }
        }];


        var layout = {
            title: ' ',
            xaxis: {
                title: 'Typ příspěvku'
            },
            yaxis: {
                title: 'Průměrný sentiment'
            },
            autosize:true

        };


        Plotly.newPlot('RTsentiment', data, layout,config);
    }
    function showboxRozsah() {
        var year = yearS;
       
        politicianDataY = politicianData[year] || politicianData["all"]
        var selectedIndices = [];
        document.querySelectorAll("#politicianListBox input:checked").forEach(checkbox => {
            selectedIndices.push(parseInt(checkbox.value));
        });

        var politicianKeys = Object.keys(politicianDataY);
        if (selectedIndices.length === 0) {
            document.getElementById('sentimentbox').style.display = "none";
            document.getElementById('sentimentbox_message').style.display = "block";
           
            return;
        } 
        document.getElementById('sentimentbox_message').style.display = "none";
        document.getElementById('sentimentbox').style.display = "block";
        var filteredPoliticianData = selectedIndices
            .map(function (index) {
                return politicianKeys[index];
            })
            .reduce(function (acc, politicianKey) {
                acc[politicianKey] = politicianDataY[politicianKey];
                return acc;
            }, {});



        var data = Object.keys(filteredPoliticianData).map(function (politician) {
            return {
                y: filteredPoliticianData[politician],
                type: 'box',
                name: politician,
                marker: {
                    color: 'rgba(0, 123, 255, 0.5)',
                },
                line: {
                    color: 'rgba(0, 123, 255, 1)',
                },
                boxmean: true,
                boxwidth: 8
            };
        });

        var layout = {
         
            xaxis: {
                title: '',
                tickmode: 'array',
                tickvals: Object.keys(filteredPoliticianData),
                tickangle: 45,
                ticktext: Object.keys(filteredPoliticianData)
            },
            yaxis: {
                title: 'Sentiment',
                range: [-1, 1],
            },
            boxmode: 'overlay',
            bargap: 0,
            bargroupgap: 0,
            showlegend: false,
            margin: {
                b: 90,
                l: 75,t:15
               
            },
            autosize:true
        };

        Plotly.newPlot('sentimentbox', data, layout,config);
    }
    function showserversent(year) {
        var ss = server_sentiment[year] || server_sentiment["all"]
        var plotData = ss.map(serverData => ({
            type: 'box',
            y: serverData.sentiments,
            name: serverData.server,
            boxmean: true,
        }));


        layout = {
            title: '',
            xaxis: { title: '' },
            yaxis: { title: 'Sentiment' },
           autosize:true,
            showlegend: false,
            margin:{
                r:20
            }
        };


        Plotly.newPlot('server-sentiment', plotData, layout,config);
    }
    
    function updateChartES() {
        var year = yearS;
        sentimentRatiosY = sentimentRatios[year] || sentimentRatios["all"];

        var politicianNames = [];
        var positiveRatios = [];
        var negativeRatios = [];

        for (var key in sentimentRatiosY) {
            politicianNames.push(key);
            positiveRatios.push(sentimentRatiosY[key].positiveRatio);
            negativeRatios.push(sentimentRatiosY[key].negativeRatio);
        }
        var selectedIndices = [];
        document.querySelectorAll("#politicianList input:checked").forEach(checkbox => {
            selectedIndices.push(parseInt(checkbox.value));
        });
        if (selectedIndices.length === 0) {
            document.getElementById('extreme_s').style.display = "none";
            document.getElementById('extreme_s_message').style.display = "block";

            return;
        }
        document.getElementById('extreme_s_message').style.display = "none";
        document.getElementById('extreme_s').style.display = "block";
        var filteredNames = selectedIndices.map(i => politicianNames[i]);
        var filteredPos = selectedIndices.map(i => positiveRatios[i]);
        var filteredNeg = selectedIndices.map(i => negativeRatios[i]);

        var trace1 = {
            x: filteredNames,
            y: filteredPos,
            name: 'Velmi pozitivní',
            type: 'bar',
            text: filteredPos.map(v => (v * 100).toFixed(2) + '%'),  
            textposition: 'auto'
        };

        var trace2 = {
            x: filteredNames,
            y: filteredNeg,
            name: 'Velmi negativní',
            type: 'bar',
            text: filteredNeg.map(v => (v * 100).toFixed(2) + '%'),  
            textposition: 'auto'
        };

        var layout = {
            autosize:true,
            yaxis: {
                tickformat: '.0%',  
            },
            showlegend:true,
             margin: {
                b: 90,
                l: 60,
                r:70,t:15
                
            }
        };

        Plotly.react('extreme_s', [trace1, trace2], layout,config);
    }


    function showboxRozsahRT() {
        var year = yearS;
      
        politicianDataY = politicianDataRT[year] || politicianDataRT["all"]
        var selectedIndices = [];
        document.querySelectorAll("#politicianListBoxRT input:checked").forEach(checkbox => {
            selectedIndices.push(parseInt(checkbox.value));
        });



        var politicianKeys = Object.keys(politicianDataY);


        var filteredPoliticianData = selectedIndices
            .map(function (index) {
                return politicianKeys[index];
            })
            .reduce(function (acc, politicianKey) {
                acc[politicianKey] = politicianDataY[politicianKey];
                return acc;
            }, {});



        var data = Object.keys(filteredPoliticianData).map(function (politician) {
            return {
                y: filteredPoliticianData[politician],
                type: 'box',
                name: politician,
                marker: {
                    color: 'rgba(0, 123, 255, 0.5)',
                },
                line: {
                    color: 'rgba(0, 123, 255, 1)',
                },
                boxmean: true,
                boxwidth: 8
            };
        });

        var layout = {
            title: 'Rozsah sentimentu v retweetech politiků',
            xaxis: {
                title: '',
                tickmode: 'array',
                tickvals: Object.keys(filteredPoliticianData),
                tickangle: 45,
                ticktext: Object.keys(filteredPoliticianData)
            },
            yaxis: {
                title: 'Sentiment',
                range: [-1, 1],
            },
            boxmode: 'overlay',
            bargap: 0,
            bargroupgap: 0,
            showlegend: false,
            margin: {
                b: 65,
                l: 30,
                t: 50
            },
            autosize:true
        };

        Plotly.newPlot('RTsentimentbox', data, layout,config);
    }
    function createCheckboxes(year) {
        var politicianNames = [];

        sentimentRatiosY = sentimentRatios[year] || sentimentRatios["all"]


        for (var key in sentimentRatiosY) {
            politicianNames.push(key);

        }
        var listForm = document.getElementById("politicianList");
        listForm.innerHTML = ''; 

        politicianNames.forEach((name, index) => {
            var div = document.createElement("div");
            div.className = 'form-check';
            var checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            if (toppoliticians.includes(name)) {
                checkbox.checked = true;
            } else {
                checkbox.checked = false;
            }
            checkbox.value = index;
            checkbox.addEventListener("change", updateChartES);

            var label = document.createElement("label");
            label.textContent = name;
           

            div.appendChild(checkbox);
            div.appendChild(label);
            listForm.appendChild(div); 
        });
    }
    function createCheckboxesBox(data,id, fce, year) {
        var listForm = document.getElementById(id);
        listForm.innerHTML = '';
        var politicianNames = [];

        sentimentRatiosY = data[year] || data["all"]


        for (var key in sentimentRatiosY) {
            politicianNames.push(key);

        }
        politicianNames.forEach((name, index) => {
            var div = document.createElement("div");
            div.className = 'form-check';
            var checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            if (toppoliticians.includes(name)) {
                checkbox.checked = true;
            } else {
                checkbox.checked = false;
            }
            
            checkbox.value = index;
            checkbox.addEventListener("change", fce);

            var label = document.createElement("label");
            label.textContent = name;
           

            div.appendChild(checkbox);
            div.appendChild(label);
            listForm.appendChild(div);
        });
    }
    function createCheckboxesAvgRT() {
        var year = yearS;
        var sr = sentimentResults[year] || sentimentResults["all"];
     
        var formRT = document.getElementById('politicianFormRT');

       
        formRT.innerHTML = "";

        sr.forEach(result => {
            var politician = result.politicId;

            var div = document.createElement('div');
            div.className = 'form-check';

            var input = document.createElement('input');
            input.type = 'checkbox';
            if (toppoliticians.includes(politician)) {
                input.checked = true;
            } else {
                input.checked = false;
            }
            input.id = politician;
            input.value = politician;

            var label = document.createElement('label');
           
            label.textContent = politician;
            
            div.appendChild(input);
            div.appendChild(label);
            formRT.appendChild(div);
        });

        formRT.addEventListener('change', () => {
            var selectedOptions = Array.from(formRT.querySelectorAll('input:checked')).map(input => input.value);
            plotGraph2(selectedOptions);
        });
    }


    function plotGraph2(selectedPoliticians) {
        var year = yearS;
        var sr = sentimentResults[year] || sentimentResults["all"]
    
        var plotlyData = [];



        if (selectedPoliticians.length === 0) {
            document.getElementById('avgrt').style.display = "none";
            document.getElementById('avgrt_message').style.display = "block";

            return;
        }
        document.getElementById('avgrt_message').style.display = "none";
        document.getElementById('avgrt').style.display = "block";

        var filteredResults = sr.filter(result => selectedPoliticians.includes(result.politicId.toString()));



        var politicians = filteredResults.map(result => result.politicId);
        var avgFB = filteredResults.map(result => result.avgSentimentFB);
        var avgRTW = filteredResults.map(result => result.avgSentimentRTW);
        var avgTW = filteredResults.map(result => result.avgSentimentTW);
        plotlyData.push({ x: politicians, y: avgFB, name: 'Facebook', type: 'bar' });
        plotlyData.push({ x: politicians, y: avgTW, name: 'Tweet', type: 'bar' });
        plotlyData.push({ x: politicians, y: avgRTW, name: 'Retweet', type: 'bar' });

        var layout = {
            barmode: 'group',
        
            yaxis: { title: 'Průměrný sentiment' },
            autosize:true,
            margin:{
                b: 90,t:15
            }
        };

        Plotly.newPlot('avgrt', plotlyData, layout,config);
    }
    function showboxRozsahM() {
        var year = yearS;

        politicianDataY = politicianDataM[year] || politicianDataM["all"]
        var selectedIndices = [];
        document.querySelectorAll("#politicianListBoxM input:checked").forEach(checkbox => {
            selectedIndices.push(parseInt(checkbox.value));
        });

        var politicianKeys = Object.keys(politicianDataY);
        if (selectedIndices.length === 0) {
            document.getElementById('sentimentboxM').style.display = "none";
            document.getElementById('sentimentboxM_message').style.display = "block";

            return;
        }
        document.getElementById('sentimentboxM_message').style.display = "none";
        document.getElementById('sentimentboxM').style.display = "block";

        var filteredPoliticianData = selectedIndices
            .map(function (index) {
                return politicianKeys[index];
            })
            .reduce(function (acc, politicianKey) {
                acc[politicianKey] = politicianDataY[politicianKey];
                return acc;
            }, {});



        var data = Object.keys(filteredPoliticianData).map(function (politician) {
            return {
                y: filteredPoliticianData[politician],
                type: 'box',
                name: politician,
                marker: {
                    color: 'rgba(0, 123, 255, 0.5)',
                },
                line: {
                    color: 'rgba(0, 123, 255, 1)',
                },
                boxmean: true,
                boxwidth: 8
            };
        });

        var layout = {

            xaxis: {
                title: '',
                tickmode: 'array',
                tickvals: Object.keys(filteredPoliticianData),
                tickangle: 45,
                ticktext: Object.keys(filteredPoliticianData)
            },
            yaxis: {
                title: 'Sentiment',
                range: [-1, 1],
            },
            boxmode: 'overlay',
            bargap: 0,
            bargroupgap: 0,
            showlegend: false,
            margin: {
                b: 90,
                l: 75, t: 15

            },
            autosize: true
        };

        Plotly.newPlot('sentimentboxM', data, layout,config);
       
    }
    function showSentimentGraphs() {

        updateTable();

        createCheckboxes();
        updateChartES();

       

        
        





        createCheckboxesBox(politicianData,"politicianListBox", showboxRozsah);

        showboxRozsah();
        createCheckboxesBox(politicianDataM,"politicianListBoxM", showboxRozsahM);

        showboxRozsahM();

        renderSentimentTime();
      

       

 


        createCheckboxesAvgRT();
        var formRT = document.getElementById('politicianFormRT');
        var selectedOptions = Array.from(formRT.querySelectorAll('input:checked')).map(input => input.value);
        plotGraph2(selectedOptions);
     

        showpolaritycounts();
    

        showpolaritycountsm();

       
         function plotGraph1(selectedPoliticians) {
          
             var filteredPoliticians = selectedPoliticians.length > 0 ? selectedPoliticians : politicians;
             var filteredNegative = filteredPoliticians.map(p => parsedMentions[p].negative);
             var filteredNeutral = filteredPoliticians.map(p => parsedMentions[p].neutral);
             var filteredPositive = filteredPoliticians.map(p => parsedMentions[p].positive);

             var trace1 = {
                 x: filteredPoliticians,
                 y: filteredNegative,
                 name: 'Negative',
                 type: 'bar'
             };

             var trace2 = {
                 x: filteredPoliticians,
                 y: filteredNeutral,
                 name: 'Neutral',
                 type: 'bar'
             };

             var trace3 = {
                 x: filteredPoliticians,
                 y: filteredPositive,
                 name: 'Positive',
                 type: 'bar'
             };

             var data = [trace1, trace2, trace3];

             var layout = {
                 barmode: 'group',
                 title: 'Sentiment příspěvků kde jsou zmíněni politici',
                 xaxis: {
                     title: 'Politik',
                     tickangle: -45
                 },
                 yaxis: {
                     title: 'Počet zmínek'
                 },
                 width: biggerWidth,
                 height: heightValue
             };

             Plotly.newPlot('mentionbar', data, layout);
         }


    

        showserversent();
      

    }

    function showMore(tableId, button) {

        const table = document.getElementById(tableId);
        if (!table) {
            console.error(`Tabulka s ID '${tableId}' nebyla nalezena.`);
            return;
        }


        const rows = table.querySelectorAll(".table-row");

        const hiddenRows = Array.from(rows).filter(row => row.style.display === "none");

        if (hiddenRows.length > 0) {

            hiddenRows.forEach(row => row.style.display = "table-row");
            button.textContent = "Skrýt";
        } else {

            Array.from(rows).forEach((row, index) => {
                if (index >= 10) {
                    row.style.display = "none";
                }
            });
            button.textContent = "Zobrazit více";
        }

    }

    function sortTable() {
        var table = document.querySelector("#merged-sentiment-table tbody");
        var sortBy = document.getElementById("sortBy").value;
        var sortOrder = document.getElementById("sortOrder").value === "asc" ? 1 : -1;

        
        function getCellValue(row, sortBy) {
            var columnIndexes = {
                'name': 0,
                'averageSentiment': 1,
                'postCount': 2,
                'mentionSentiment': 3,
                'mentionCount': 4
            };
            var cell = row.cells[columnIndexes[sortBy]];
            var textContent = cell.textContent.trim();

            if (textContent === "--") return null;

            if (sortBy === 'name') {
                return textContent.toLowerCase(); 
            }

            textContent = textContent.replace(',', '.');
            var value = parseFloat(textContent);
            return isNaN(value) ? null : value;
        }


        filterTable(rows);

        var validRows = [];
        var excludedRows = [];

        rows.forEach(row => {
            var value = getCellValue(row, sortBy);
            if (value == null || row.style.display === "none") {
                row.style.display === "none"
                excludedRows.push(row); 
            } else {
                validRows.push(row); 
            }
        });

       
        validRows.sort((rowA, rowB) => {
            var valueA = getCellValue(rowA, sortBy);
            var valueB = getCellValue(rowB, sortBy);
            if (valueA === valueB) return 0;
            return (valueA > valueB ? 1 : -1) * sortOrder;
        });

       
        rows = validRows.concat(excludedRows);
        totalPages = Math.ceil(validRows.length / rowsPerPage);
        currentPage = 1; 
        document.getElementById("totalPages").textContent = totalPages;
        console.log(rows.length)
        renderTable(); 
    }

    function filterTable(rows) {
        var minPostCount = document.getElementById("minPostCount").value;

        if (minPostCount) {
            rows.forEach(row => {
                var postCountCell = row.cells[2];
                var postCount = parseInt(postCountCell.textContent.trim());

                if ( postCount < minPostCount) {
                    row.style.display = "none"; 
                } else {
                    row.style.display = "table-row";  
                }
            });
        } else {
            rows.forEach(row => row.style.display = "table-row");
        }
    }

    function uncheck(formId) {
        const form = document.getElementById(formId);
        const checkboxes = form.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(checkbox => checkbox.checked = false);

        
        form.dispatchEvent(new Event('change'));
        if (checkboxes.length > 0) {
            checkboxes[0].dispatchEvent(new Event('change', { bubbles: false }));
        }
        
    }
    



   
    document.addEventListener("DOMContentLoaded", function () {
        var model = @Html.Raw(Json.Serialize(ViewBag.model));
        if(model=="BERT"){

            document.getElementById("modelFilter").value = "BERT";
        }else{
            document.getElementById("modelFilter").value = "VADER";
        }
        document.getElementById("yearFilter").addEventListener("change", function () {
            const selectedYear = this.value;
            updateStatistics(selectedYear);
        });
        document.getElementById("modelFilter").addEventListener("change", function () {
            const model = this.value;
            changeModel(model)
        });
        showSentimentGraphs()


    });
    
</script>
<div class="chart-card">
    <div class="chart-header">
        <h2 class="chart-title">Analýza sentimentu příspěvků</h2>
        <p class="chart-subtitle">
            Na této stránce je zobrazena analýza sentimentu příspěvků. Lze zde vidět distribuce příspěvků dle sentimentu, srovnání sociálních sítí či vývoj sentimentu v čase. Statistiky týkající se sentimentu příspěvků konkrétních politiků si lze zobrazit v dolní části stránky a také v tabulce se souhrnými informacemi. V tabulce lze politiky také filtrovat a řadit.

        </p>
        <p class="chart-subtitle">
            Lze si také zvolit nástroj použitý po detekci sentimentu, na základě kterého budou zobrazeny výsledky analýzy.
        </p>
    </div>
    <p class="d-flex align-items-center">
        <span class="me-2">Vyberte nástroj pro detekci sentimentu:</span>
        <select id="modelFilter" class="form-select">
            <option value="BERT">BERT</option>
            <option value="VADER">VADER</option>

        </select>
    </p>

    <p class="d-flex align-items-center">
        <span class="me-2">Zobrazit statistiky pro rok:</span>
        <select id="yearFilter" class="form-select w-auto">
            <option value="">Všechny roky</option>
            @for (int year = 2016; year <= 2022; year++)
            {
                <option value="@year.ToString()">@year</option>
            }
        </select>
    </p>
</div>


<div id="sentiment" class="sentiment_page">
    <div class="left-panel-sentiment">

        <div class="myrow2">
            <div class="chart-card">
                <div class="chart-header">
                    <h3 class="chart-title">Distribuce příspěvků dle sentimentu</h3>
                    <p class="chart-subtitle">Všechny příspěvky</p>
                </div>
                <div class="chart-container-m" id="polaritybar"></div>
            
            </div>
            <div class="chart-card">
                <div class="chart-header">
                    <h3 class="chart-title">Distribuce příspěvků dle sentimentu</h3>
                    <p class="chart-subtitle">Příspěvky se zmínkami</p>
                </div>
                <div class="chart-container-m" id="polaritybarM"></div>

            </div>
        </div>
        <div class="myrow2">
            <div class="chart-card">
                <div class="chart-header">
                    <h3 class="chart-title">Rozložení sentimentu ve vyjádřeních</h3>
                    <p class="chart-subtitle">Srovnání sentimentu na Facebooku, Twitteru (Klasické tweety + retweety)</p>
                </div>
                <div class="chart-container-m" id="server-sentiment"></div>

            </div>
            <div class="chart-card">
                <div class="chart-header">
                    <h3 class="chart-title">Vývoj sentimentu v čase</h3>
                    <p class="chart-subtitle">Průměrný sentiment obě pololetí každého roku </p>
                </div>
                <div class="chart-container-m" id="sentimenttime"></div>

            </div>
        </div>
        
       
      
       
        
    </div>
    <div class="right-panel-sentiment">
       
           
                <h3>Seznam politiků</h3>
                <div  class="d-flex gap-2 align-items-center p-3 border rounded bg-light filter-panel">
                    <label for="sortBy">Řadit podle:</label>
                    <select id="sortBy" onchange="sortTable()" class="form-select">
                        
                        <option value="postCount">Počet příspěvků</option>
                <option value="name">Abecedně</option>
                <option value="averageSentiment">Průměrný Sentiment</option>
                        <option value="mentionSentiment">Průměrný Sentiment ve zmínkách</option>
                        <option value="mentionCount">Počet zmínek</option>
                    </select>


                    <label for="sortOrder">Pořadí:</label>
                    <select id="sortOrder" onchange="sortTable()" class="form-select">
                        <option value="desc">Sestupně</option>
                        <option value="asc">Vzestupně</option>
                        
                    </select>

                    <label for="minPostCount">Minimální počet příspěvků:</label>
                    <input type="number" id="minPostCount" class="form-select" placeholder="Zadejte počet" onchange="sortTable()">
                </div>

                <table id="merged-sentiment-table" class="table styled-table">
                    <thead class="thead-light">
                        <tr>
                            <th>Politik</th>
                            <th>Průměr. sentiment</th>
                            <th>Počet přísp.</th>
                            <th>Průměr. sentiment ve zmínkách</th>
                            <th>Počet zmínek</th>
                        </tr>
                    </thead>
                    <tbody >
                      
                    </tbody>
                </table>
        <div class="pagination">
            <button id="prevPage" onclick="changePage(-1)">Předchozí</button>
            <span id="pageNumber">1</span> z <span id="totalPages">1</span>
            <button id="nextPage" onclick="changePage(1)">Další</button>
        </div>

       
            
        
       

    </div>
    



</div>
<div class="bottom-panel">
    <div class="chart-card-bg">
        <div class="chart-header">
            <h3 class="chart-title">Sentiment na různých sociálních sítích</h3>
            <p class="chart-subtitle">Srovnání facebookových, twitterových a retweetovaných příspěvků mezi politiky</p>
        </div>
        <div class="graphrow">
            <div class="form-container1">
                <h3 class="form-header">Vyberte politiky:</h3>
                
                <form id="politicianFormRT" class="form-group custom-form" >
                </form>
                <button class="form-footer" type="button" onclick="uncheck('politicianFormRT')" >
                    Zrušit výběr
                </button>
            </div>


            <div class="chart-container1">
                <div id="avgrt" class="chart-container"></div>
                <div id="avgrt_message" class="chart-container message" style="display:none;">Vyberte politiky</div>

            </div>
        </div>


    </div>

    <div class="chart-card-bg">
        <div class="chart-header">
            <h3 class="chart-title">Míra silně emotivních příspěvků politiků </h3>
            <p class="chart-subtitle">Procento příspěvků politiků, které mají výrazně pozitivní (sentiment> 0.8) nebo negativní (sentiment < -0.8) tón.</p>
        </div>
        <div class="graphrow">
            <div class="form-container1">
                <h3 class="form-header">Vyberte politiky:</h3>
                <form id="politicianList" class="form-group custom-form" >
                </form>
                <button class="form-footer" type="button" onclick="uncheck('politicianList')">
                    Zrušit výběr
                </button>
            </div>
            <div class="chart-container1">
                <div id="extreme_s" class="chart-container"></div>
                <div id="extreme_s_message" class="chart-container message" style="display:none;">Vyberte politiky</div>

            </div>
        </div>

    </div>

    <div class="chart-card-bg">
        <div class="chart-header">
            <h3 class="chart-title">Rozsah sentimentu v příspěvcích politiků </h3>
            <p class="chart-subtitle">Pro politiky vybrané ze seznamu je zobrazeno rozložení jejich příspěvků dle sentimentu </p>
        </div>
        <div class="graphrow">
            <div class="form-container1">
                <h3 class="form-header">Vyberte politiky:</h3>
                <form id="politicianListBox" class="form-group custom-form" >
                </form>
                <button class="form-footer" type="button" onclick="uncheck('politicianListBox')">
                    Zrušit výběr
                </button>
            </div>

            <div class="chart-container1 ">
                <div id="sentimentbox" class="chart-container" style="display:none;"></div>
                <div id="sentimentbox_message" class="chart-container message" style="display:none;">Vyberte politiky</div>
            </div>
           
        </div>

    </div>
    <div class="chart-card-bg">
        <div class="chart-header">
            <h3 class="chart-title">Sentiment ve zmínkách o politicích </h3>
            <p class="chart-subtitle">Pro politiky vybrané ze seznamu je zobrazeno rozložení příspěvků, ve kterých byli zmíněni, dle sentimentu</p>
        </div>
        <div class="graphrow">
            <div class="form-container1">
                <h3 class="form-header">Vyberte politiky:</h3>
                <form id="politicianListBoxM" class="form-group custom-form">
                </form>
                <button class="form-footer" type="button" onclick="uncheck('politicianListBoxM')">
                    Zrušit výběr
                </button>
            </div>

            <div class="chart-container1 ">
                <div id="sentimentboxM" class="chart-container"></div>
                <div id="sentimentboxM_message" class="chart-container message" style="display:none;">Vyberte politiky</div>
            </div>

        </div>

    </div>
</div>