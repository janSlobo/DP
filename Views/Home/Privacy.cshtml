@{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>
<style>
    svg {
        width: 100%;
        height: 1000px;
        background: #f8f8f8;
    }

    .node {
        fill: steelblue;
        stroke: #fff;
        stroke-width: 1.5px;
        cursor: pointer;
    }

    .link {
        stroke: #999;
        stroke-opacity: 0.6;
    }

    .label {
        font-family: Arial, sans-serif;
        font-size: 12px;
        fill: black;
        pointer-events: none;
    }
</style>
<svg></svg>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        fetch("/data/politician_similarity_jaccard_normalized2019.json")
            .then(response => response.json())
            .then(graphData => {
                const width = window.innerWidth, height = 1000;
                const svg = d3.select("svg").attr("width", width).attr("height", height);

                const nodes = graphData.nodes;
                const links = graphData.links;

                // Přiřazení unikátního id k uzlům (pro D3.js, kdy uzly mají pouze "id")
                const nodeById = {};
                nodes.forEach(node => nodeById[node.id] = node); // mapujeme id na uzly

                // Představme si vážený stupeň uzlů
                const nodeDegrees = {};
                links.forEach(link => {
                    nodeDegrees[link.source] = (nodeDegrees[link.source] || 0) + link.weight;
                    nodeDegrees[link.target] = (nodeDegrees[link.target] || 0) + link.weight;
                });

                // Vytvoření síťové simulace (force layout)
                const simulation = d3.forceSimulation(nodes)
                    .force("link", d3.forceLink(links).id(d => d.id).distance(300).strength(0.4))  // Zvětšení vzdálenosti mezi propojenými uzly
                    .force("charge", d3.forceManyBody().strength(-300))  // Zvýšení síly odtahování uzlů
                    .force("center", d3.forceCenter(width / 2, height / 2))
                    .on("tick", ticked);

                // Vykreslení hran
                const link = svg.append("g")
                    .selectAll("line")
                    .data(links)
                    .enter().append("line")
                    .attr("class", "link")
                    .attr("stroke-width", d => Math.sqrt(d.weight) * 15)  // Tloušťka hrany podle váhy

                // Vykreslení uzlů
                const node = svg.append("g")
                    .selectAll("circle")
                    .data(nodes)
                    .enter().append("circle")
                    .attr("class", "node")
                    .attr("r", d => Math.sqrt(nodeDegrees[d.id]) * 20)  // Velikost uzlu podle váženého stupně
                    .attr("fill", "steelblue")
                    .call(d3.drag()
                        .on("start", dragStart)
                        .on("drag", dragged)
                        .on("end", dragEnd));

                // Vykreslení popisků
                const labels = svg.append("g")
                    .selectAll("text")
                    .data(nodes)
                    .enter().append("text")
                    .attr("class", "label")
                    .attr("dx", 12)
                    .attr("dy", 4)
                    .text(d => d.id);

                // Funkce pro aktualizaci pozic
                function ticked() {
                    link
                        .attr("x1", d => d.source.x)
                        .attr("y1", d => d.source.y)
                        .attr("x2", d => d.target.x)
                        .attr("y2", d => d.target.y);

                    node
                        .attr("cx", d => d.x)
                        .attr("cy", d => d.y);

                    labels
                        .attr("x", d => d.x)
                        .attr("y", d => d.y);

                    // Počítání minimálních a maximálních hodnot pro pozice uzlů
                    const xMin = d3.min(nodes, d => d.x);
                    const xMax = d3.max(nodes, d => d.x);
                    const yMin = d3.min(nodes, d => d.y);
                    const yMax = d3.max(nodes, d => d.y);

                    // Dynamické přizpůsobení měřítek pro X a Y osy
                    const padding = 50;  // Padding pro graf (aby nebyl oříznutý)
                    const scaleX = d3.scaleLinear()
                        .domain([xMin - padding, xMax + padding])  // Včetně paddingu
                        .range([0, width]);

                    const scaleY = d3.scaleLinear()
                        .domain([yMin - padding, yMax + padding])  // Včetně paddingu
                        .range([0, height]);

                    // Aplikování nových měřítek na pozice uzlů a hran
                    node.attr("cx", d => scaleX(d.x)).attr("cy", d => scaleY(d.y));
                    labels.attr("x", d => scaleX(d.x)).attr("y", d => scaleY(d.y));
                    link
                        .attr("x1", d => scaleX(d.source.x))
                        .attr("y1", d => scaleY(d.source.y))
                        .attr("x2", d => scaleX(d.target.x))
                        .attr("y2", d => scaleY(d.target.y));
                }

                // Funkce pro tahání uzlů
                function dragStart(event, d) {
                    if (!event.active) simulation.alphaTarget(0.3).restart();
                    d.fx = d.x;
                    d.fy = d.y;
                }

                function dragged(event, d) {
                    d.fx = event.x;
                    d.fy = event.y;
                }

                function dragEnd(event, d) {
                    if (!event.active) simulation.alphaTarget(0);
                    d.fx = null;
                    d.fy = null;
                }
            })
            .catch(error => console.error("Chyba při načítání dat:", error));
    });
</script>


