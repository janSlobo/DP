@{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>
@using (Html.BeginForm("ProcessText", "Home", FormMethod.Post))
{
    <textarea name="inputText" rows="4" cols="50"></textarea>
    <br />
    <input type="submit" value="Zpracovat text" />
}

@if (ViewBag.Result != null)
{
    <div>
        <h3>Výsledek analýzy:</h3>
        <pre>@ViewBag.Result</pre>
    </div>
}

<style>
    svg {
        width: 1300px;
        height: 1150px;
        background: #f8f8f8;
    }

    .node {
        fill: steelblue;
        stroke: #fff;
        stroke-width: 1.5px;
        cursor: pointer;
    }

    .link {
        stroke: #999;
        stroke-opacity: 0.6;
    }

    .label {
        font-family: Arial, sans-serif;
        font-size: 12px;
        fill: black;
        pointer-events: none;
    }
</style>
<svg></svg>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        fetch("/data/politician_similarity_jaccard_normalized2019_final.json")
            .then(response => response.json())
            .then(graphData => {
                const width = 1300, height = 1150;
                const svg = d3.select("svg").attr("width", width).attr("height", height);

                const nodes = graphData.nodes;
                const links = graphData.links;
               

                fetch("/data/politician_communities.csv")
                    .then(response => response.text())
                    .then(csvData => {
                        const skupiny = parseCSV(csvData);
                        console.log(skupiny)
                        const nodeById = {};
                        nodes.forEach(node => nodeById[node.id] = node);

                        nodes.forEach(node => {
                            node.group = skupiny[node.id] || "neznama"; 
                          
                        });

                        const nodeDegrees = {};
                        links.forEach(link => {
                            nodeDegrees[link.source] = (nodeDegrees[link.source] || 0) + link.weight;
                            nodeDegrees[link.target] = (nodeDegrees[link.target] || 0) + link.weight;
                        });

                        const simulation = d3.forceSimulation(nodes)
                            .force("link", d3.forceLink(links)
                                .id(d => d.id)
                                .distance(30)  
                                .strength(1)) 
                            .force("charge", d3.forceManyBody()
                                .strength(-1000) 
                                .theta(0.8) 
                                .distanceMax(1000)) 
                            .force("center", d3.forceCenter(width / 2, height / 2))
                            .force("collision", d3.forceCollide(10))  
                            .on("tick", ticked);


                    
                        const link = svg.append("g")
                            .selectAll("line")
                            .data(links)
                            .enter().append("line")
                            .attr("class", "link")
                            .attr("stroke-width", d => Math.sqrt(d.weight) * 15);

                        const colorScale = d3.scaleOrdinal(d3.schemeCategory10);
                       
                        const node = svg.append("g")
                            .selectAll("circle")
                            .data(nodes)
                            .enter().append("circle")
                            .attr("class", "node")
                            .attr("r", d => Math.max(10, Math.sqrt(nodeDegrees[d.id]) * 20))
                            .style("fill", d =>  colorScale(d.group))
                            .call(d3.drag()
                                .on("start", dragStart)
                                .on("drag", dragged)
                                .on("end", dragEnd));

                        const labels = svg.append("g")
                            .selectAll("text")
                            .data(nodes)
                            .enter().append("text")
                            .attr("class", "label")
                            .attr("dx", 12)
                            .attr("dy", 4)
                            .text(d => d.id);

                        function ticked() {
                            link
                                .attr("x1", d => d.source.x)
                                .attr("y1", d => d.source.y)
                                .attr("x2", d => d.target.x)
                                .attr("y2", d => d.target.y);

                            node
                                .attr("cx", d => d.x)
                                .attr("cy", d => d.y);

                            labels
                                .attr("x", d => d.x)
                                .attr("y", d => d.y);

                            const xMin = d3.min(nodes, d => d.x);
                            const xMax = d3.max(nodes, d => d.x);
                            const yMin = d3.min(nodes, d => d.y);
                            const yMax = d3.max(nodes, d => d.y);

                            const padding = 50;
                            const scaleX = d3.scaleLinear()
                                .domain([xMin - padding, xMax + padding])
                                .range([0, width]);

                            const scaleY = d3.scaleLinear()
                                .domain([yMin - padding, yMax + padding])
                                .range([0, height]);

                            node.attr("cx", d => scaleX(d.x)).attr("cy", d => scaleY(d.y));
                            labels.attr("x", d => scaleX(d.x)).attr("y", d => scaleY(d.y));
                            link
                                .attr("x1", d => scaleX(d.source.x))
                                .attr("y1", d => scaleY(d.source.y))
                                .attr("x2", d => scaleX(d.target.x))
                                .attr("y2", d => scaleY(d.target.y));
                        }

                        function dragStart(event, d) {
                            if (!event.active) simulation.alphaTarget(0.3).restart();
                            d.fx = d.x;
                            d.fy = d.y;
                        }

                        function dragged(event, d) {
                            d.fx = event.x;
                            d.fy = event.y;
                        }

                        function dragEnd(event, d) {
                            if (!event.active) simulation.alphaTarget(0);
                            d.fx = null;
                            d.fy = null;
                        }

                    })
                    .catch(error => console.error("Chyba při načítání souboru se skupinami:", error));

                function parseCSV(data) {
                    const rows = data.split("\n");
                    const skupiny = {};
                    rows.forEach(row => {
                        const [id, organizace] = row.split(",");
                        if (id && organizace) {
                            skupiny[id.trim()] = organizace.trim();
                        }
                    });
                    return skupiny;
                }
            })
            .catch(error => console.error("Chyba při načítání dat:", error));
    });

</script>


